//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace Expanz.ThinRIA.ESAPortal {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.expanz.com/ESAService", ConfigurationName="ESAPortal.IESAService")]
    public interface IESAService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ChangeUserPassword", ReplyAction="http://www.expanz.com/ESAService/IESAService/ChangeUserPasswordResponse")]
        System.IAsyncResult BeginChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndChangeUserPassword(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/CreateSession", ReplyAction="http://www.expanz.com/ESAService/IESAService/CreateSessionResponse")]
        System.IAsyncResult BeginCreateSession(string inXml, ref string errorMessage, System.AsyncCallback callback, object asyncState);
        
        string EndCreateSession(ref string errorMessage, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/Exec", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecResponse")]
        System.IAsyncResult BeginExec(string inXML, ref string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndExec(ref string sessionHandle, ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ExecTimed", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecTimedResponse")]
        System.IAsyncResult BeginExecTimed(string inXML, ref string sessionHandle, ref string errors, ref long responseTime, System.AsyncCallback callback, object asyncState);
        
        string EndExecTimed(ref string sessionHandle, ref string errors, ref long responseTime, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ExecLogged", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecLoggedResponse")]
        System.IAsyncResult BeginExecLogged(string inXML, ref string sessionHandle, bool logRequests, bool logResponses, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndExecLogged(ref string sessionHandle, ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ExecAnonymous", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecAnonymousResponse")]
        System.IAsyncResult BeginExecAnonymous(string site, string inXml, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndExecAnonymous(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ListAvailableSites", ReplyAction="http://www.expanz.com/ESAService/IESAService/ListAvailableSitesResponse")]
        System.IAsyncResult BeginListAvailableSites(ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndListAvailableSites(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/Ping", ReplyAction="http://www.expanz.com/ESAService/IESAService/PingResponse")]
        System.IAsyncResult BeginPing(string sessionHandle, System.AsyncCallback callback, object asyncState);
        
        bool EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/PingWithLoad", ReplyAction="http://www.expanz.com/ESAService/IESAService/PingWithLoadResponse")]
        System.IAsyncResult BeginPingWithLoad(object payload, System.AsyncCallback callback, object asyncState);
        
        int EndPingWithLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ProcessEDI", ReplyAction="http://www.expanz.com/ESAService/IESAService/ProcessEDIResponse")]
        System.IAsyncResult BeginProcessEDI(string EDIAccessKey, string site, string inXml, string xsdURL, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndProcessEDI(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ReleaseSession", ReplyAction="http://www.expanz.com/ESAService/IESAService/ReleaseSessionResponse")]
        System.IAsyncResult BeginReleaseSession(string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndReleaseSession(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/Test", ReplyAction="http://www.expanz.com/ESAService/IESAService/TestResponse")]
        System.IAsyncResult BeginTest(string val, System.AsyncCallback callback, object asyncState);
        
        string EndTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/TrickleContent", ReplyAction="http://www.expanz.com/ESAService/IESAService/TrickleContentResponse")]
        System.IAsyncResult BeginTrickleContent(string key, byte[] bytes, ref string errors, System.AsyncCallback callback, object asyncState);
        
        int EndTrickleContent(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/WebServerPing", ReplyAction="http://www.expanz.com/ESAService/IESAService/WebServerPingResponse")]
        System.IAsyncResult BeginWebServerPing(System.AsyncCallback callback, object asyncState);
        
        bool EndWebServerPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/SiteManagerPing", ReplyAction="http://www.expanz.com/ESAService/IESAService/SiteManagerPingResponse")]
        System.IAsyncResult BeginSiteManagerPing(System.AsyncCallback callback, object asyncState);
        
        bool EndSiteManagerPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/GetSchemaForActivity", ReplyAction="http://www.expanz.com/ESAService/IESAService/GetSchemaForActivityResponse")]
        System.IAsyncResult BeginGetSchemaForActivity(string site, string activity, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndGetSchemaForActivity(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ListActivitiesForSite", ReplyAction="http://www.expanz.com/ESAService/IESAService/ListActivitiesForSiteResponse")]
        System.IAsyncResult BeginListActivitiesForSite(string site, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndListActivitiesForSite(ref string errors, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IESAServiceChannel : Expanz.ThinRIA.ESAPortal.IESAService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errorMessage {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string sessionHandle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecTimedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecTimedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string sessionHandle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public long responseTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecLoggedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecLoggedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string sessionHandle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecAnonymousCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecAnonymousCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListAvailableSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListAvailableSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingWithLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingWithLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcessEDICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProcessEDICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReleaseSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReleaseSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrickleContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TrickleContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServerPingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public WebServerPingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SiteManagerPingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SiteManagerPingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSchemaForActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSchemaForActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListActivitiesForSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListActivitiesForSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ESAServiceClient : System.ServiceModel.ClientBase<Expanz.ThinRIA.ESAPortal.IESAService>, Expanz.ThinRIA.ESAPortal.IESAService {
        
        private BeginOperationDelegate onBeginChangeUserPasswordDelegate;
        
        private EndOperationDelegate onEndChangeUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onChangeUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateSessionDelegate;
        
        private EndOperationDelegate onEndCreateSessionDelegate;
        
        private System.Threading.SendOrPostCallback onCreateSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecDelegate;
        
        private EndOperationDelegate onEndExecDelegate;
        
        private System.Threading.SendOrPostCallback onExecCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecTimedDelegate;
        
        private EndOperationDelegate onEndExecTimedDelegate;
        
        private System.Threading.SendOrPostCallback onExecTimedCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecLoggedDelegate;
        
        private EndOperationDelegate onEndExecLoggedDelegate;
        
        private System.Threading.SendOrPostCallback onExecLoggedCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecAnonymousDelegate;
        
        private EndOperationDelegate onEndExecAnonymousDelegate;
        
        private System.Threading.SendOrPostCallback onExecAnonymousCompletedDelegate;
        
        private BeginOperationDelegate onBeginListAvailableSitesDelegate;
        
        private EndOperationDelegate onEndListAvailableSitesDelegate;
        
        private System.Threading.SendOrPostCallback onListAvailableSitesCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingWithLoadDelegate;
        
        private EndOperationDelegate onEndPingWithLoadDelegate;
        
        private System.Threading.SendOrPostCallback onPingWithLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginProcessEDIDelegate;
        
        private EndOperationDelegate onEndProcessEDIDelegate;
        
        private System.Threading.SendOrPostCallback onProcessEDICompletedDelegate;
        
        private BeginOperationDelegate onBeginReleaseSessionDelegate;
        
        private EndOperationDelegate onEndReleaseSessionDelegate;
        
        private System.Threading.SendOrPostCallback onReleaseSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestDelegate;
        
        private EndOperationDelegate onEndTestDelegate;
        
        private System.Threading.SendOrPostCallback onTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginTrickleContentDelegate;
        
        private EndOperationDelegate onEndTrickleContentDelegate;
        
        private System.Threading.SendOrPostCallback onTrickleContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginWebServerPingDelegate;
        
        private EndOperationDelegate onEndWebServerPingDelegate;
        
        private System.Threading.SendOrPostCallback onWebServerPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginSiteManagerPingDelegate;
        
        private EndOperationDelegate onEndSiteManagerPingDelegate;
        
        private System.Threading.SendOrPostCallback onSiteManagerPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSchemaForActivityDelegate;
        
        private EndOperationDelegate onEndGetSchemaForActivityDelegate;
        
        private System.Threading.SendOrPostCallback onGetSchemaForActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginListActivitiesForSiteDelegate;
        
        private EndOperationDelegate onEndListActivitiesForSiteDelegate;
        
        private System.Threading.SendOrPostCallback onListActivitiesForSiteCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ESAServiceClient() {
        }
        
        public ESAServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ESAServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ESAServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ESAServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ChangeUserPasswordCompletedEventArgs> ChangeUserPasswordCompleted;
        
        public event System.EventHandler<CreateSessionCompletedEventArgs> CreateSessionCompleted;
        
        public event System.EventHandler<ExecCompletedEventArgs> ExecCompleted;
        
        public event System.EventHandler<ExecTimedCompletedEventArgs> ExecTimedCompleted;
        
        public event System.EventHandler<ExecLoggedCompletedEventArgs> ExecLoggedCompleted;
        
        public event System.EventHandler<ExecAnonymousCompletedEventArgs> ExecAnonymousCompleted;
        
        public event System.EventHandler<ListAvailableSitesCompletedEventArgs> ListAvailableSitesCompleted;
        
        public event System.EventHandler<PingCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<PingWithLoadCompletedEventArgs> PingWithLoadCompleted;
        
        public event System.EventHandler<ProcessEDICompletedEventArgs> ProcessEDICompleted;
        
        public event System.EventHandler<ReleaseSessionCompletedEventArgs> ReleaseSessionCompleted;
        
        public event System.EventHandler<TestCompletedEventArgs> TestCompleted;
        
        public event System.EventHandler<TrickleContentCompletedEventArgs> TrickleContentCompleted;
        
        public event System.EventHandler<WebServerPingCompletedEventArgs> WebServerPingCompleted;
        
        public event System.EventHandler<SiteManagerPingCompletedEventArgs> SiteManagerPingCompleted;
        
        public event System.EventHandler<GetSchemaForActivityCompletedEventArgs> GetSchemaForActivityCompleted;
        
        public event System.EventHandler<ListActivitiesForSiteCompletedEventArgs> ListActivitiesForSiteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeUserPassword(user, oldPassword, newPassword, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAService.EndChangeUserPassword(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndChangeUserPassword(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginChangeUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string oldPassword = ((string)(inValues[1]));
            string newPassword = ((string)(inValues[2]));
            string errors = ((string)(inValues[3]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginChangeUserPassword(user, oldPassword, newPassword, ref errors, callback, asyncState);
        }
        
        private object[] OnEndChangeUserPassword(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndChangeUserPassword(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnChangeUserPasswordCompleted(object state) {
            if ((this.ChangeUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeUserPasswordCompleted(this, new ChangeUserPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeUserPasswordAsync(string user, string oldPassword, string newPassword, string errors) {
            this.ChangeUserPasswordAsync(user, oldPassword, newPassword, errors, null);
        }
        
        public void ChangeUserPasswordAsync(string user, string oldPassword, string newPassword, string errors, object userState) {
            if ((this.onBeginChangeUserPasswordDelegate == null)) {
                this.onBeginChangeUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginChangeUserPassword);
            }
            if ((this.onEndChangeUserPasswordDelegate == null)) {
                this.onEndChangeUserPasswordDelegate = new EndOperationDelegate(this.OnEndChangeUserPassword);
            }
            if ((this.onChangeUserPasswordCompletedDelegate == null)) {
                this.onChangeUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginChangeUserPasswordDelegate, new object[] {
                        user,
                        oldPassword,
                        newPassword,
                        errors}, this.onEndChangeUserPasswordDelegate, this.onChangeUserPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginCreateSession(string inXml, ref string errorMessage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateSession(inXml, ref errorMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAService.EndCreateSession(ref string errorMessage, System.IAsyncResult result) {
            return base.Channel.EndCreateSession(ref errorMessage, result);
        }
        
        private System.IAsyncResult OnBeginCreateSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inXml = ((string)(inValues[0]));
            string errorMessage = ((string)(inValues[1]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginCreateSession(inXml, ref errorMessage, callback, asyncState);
        }
        
        private object[] OnEndCreateSession(System.IAsyncResult result) {
            string errorMessage = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndCreateSession(ref errorMessage, result);
            return new object[] {
                    errorMessage,
                    retVal};
        }
        
        private void OnCreateSessionCompleted(object state) {
            if ((this.CreateSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateSessionCompleted(this, new CreateSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateSessionAsync(string inXml, string errorMessage) {
            this.CreateSessionAsync(inXml, errorMessage, null);
        }
        
        public void CreateSessionAsync(string inXml, string errorMessage, object userState) {
            if ((this.onBeginCreateSessionDelegate == null)) {
                this.onBeginCreateSessionDelegate = new BeginOperationDelegate(this.OnBeginCreateSession);
            }
            if ((this.onEndCreateSessionDelegate == null)) {
                this.onEndCreateSessionDelegate = new EndOperationDelegate(this.OnEndCreateSession);
            }
            if ((this.onCreateSessionCompletedDelegate == null)) {
                this.onCreateSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateSessionCompleted);
            }
            base.InvokeAsync(this.onBeginCreateSessionDelegate, new object[] {
                        inXml,
                        errorMessage}, this.onEndCreateSessionDelegate, this.onCreateSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginExec(string inXML, ref string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExec(inXML, ref sessionHandle, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAService.EndExec(ref string sessionHandle, ref string errors, System.IAsyncResult result) {
            return base.Channel.EndExec(ref sessionHandle, ref errors, result);
        }
        
        private System.IAsyncResult OnBeginExec(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inXML = ((string)(inValues[0]));
            string sessionHandle = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginExec(inXML, ref sessionHandle, ref errors, callback, asyncState);
        }
        
        private object[] OnEndExec(System.IAsyncResult result) {
            string sessionHandle = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndExec(ref sessionHandle, ref errors, result);
            return new object[] {
                    sessionHandle,
                    errors,
                    retVal};
        }
        
        private void OnExecCompleted(object state) {
            if ((this.ExecCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecCompleted(this, new ExecCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecAsync(string inXML, string sessionHandle, string errors) {
            this.ExecAsync(inXML, sessionHandle, errors, null);
        }
        
        public void ExecAsync(string inXML, string sessionHandle, string errors, object userState) {
            if ((this.onBeginExecDelegate == null)) {
                this.onBeginExecDelegate = new BeginOperationDelegate(this.OnBeginExec);
            }
            if ((this.onEndExecDelegate == null)) {
                this.onEndExecDelegate = new EndOperationDelegate(this.OnEndExec);
            }
            if ((this.onExecCompletedDelegate == null)) {
                this.onExecCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecCompleted);
            }
            base.InvokeAsync(this.onBeginExecDelegate, new object[] {
                        inXML,
                        sessionHandle,
                        errors}, this.onEndExecDelegate, this.onExecCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginExecTimed(string inXML, ref string sessionHandle, ref string errors, ref long responseTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecTimed(inXML, ref sessionHandle, ref errors, ref responseTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAService.EndExecTimed(ref string sessionHandle, ref string errors, ref long responseTime, System.IAsyncResult result) {
            return base.Channel.EndExecTimed(ref sessionHandle, ref errors, ref responseTime, result);
        }
        
        private System.IAsyncResult OnBeginExecTimed(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inXML = ((string)(inValues[0]));
            string sessionHandle = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            long responseTime = ((long)(inValues[3]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginExecTimed(inXML, ref sessionHandle, ref errors, ref responseTime, callback, asyncState);
        }
        
        private object[] OnEndExecTimed(System.IAsyncResult result) {
            string sessionHandle = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            long responseTime = this.GetDefaultValueForInitialization<long>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndExecTimed(ref sessionHandle, ref errors, ref responseTime, result);
            return new object[] {
                    sessionHandle,
                    errors,
                    responseTime,
                    retVal};
        }
        
        private void OnExecTimedCompleted(object state) {
            if ((this.ExecTimedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecTimedCompleted(this, new ExecTimedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecTimedAsync(string inXML, string sessionHandle, string errors, long responseTime) {
            this.ExecTimedAsync(inXML, sessionHandle, errors, responseTime, null);
        }
        
        public void ExecTimedAsync(string inXML, string sessionHandle, string errors, long responseTime, object userState) {
            if ((this.onBeginExecTimedDelegate == null)) {
                this.onBeginExecTimedDelegate = new BeginOperationDelegate(this.OnBeginExecTimed);
            }
            if ((this.onEndExecTimedDelegate == null)) {
                this.onEndExecTimedDelegate = new EndOperationDelegate(this.OnEndExecTimed);
            }
            if ((this.onExecTimedCompletedDelegate == null)) {
                this.onExecTimedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecTimedCompleted);
            }
            base.InvokeAsync(this.onBeginExecTimedDelegate, new object[] {
                        inXML,
                        sessionHandle,
                        errors,
                        responseTime}, this.onEndExecTimedDelegate, this.onExecTimedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginExecLogged(string inXML, ref string sessionHandle, bool logRequests, bool logResponses, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecLogged(inXML, ref sessionHandle, logRequests, logResponses, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAService.EndExecLogged(ref string sessionHandle, ref string errors, System.IAsyncResult result) {
            return base.Channel.EndExecLogged(ref sessionHandle, ref errors, result);
        }
        
        private System.IAsyncResult OnBeginExecLogged(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inXML = ((string)(inValues[0]));
            string sessionHandle = ((string)(inValues[1]));
            bool logRequests = ((bool)(inValues[2]));
            bool logResponses = ((bool)(inValues[3]));
            string errors = ((string)(inValues[4]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginExecLogged(inXML, ref sessionHandle, logRequests, logResponses, ref errors, callback, asyncState);
        }
        
        private object[] OnEndExecLogged(System.IAsyncResult result) {
            string sessionHandle = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndExecLogged(ref sessionHandle, ref errors, result);
            return new object[] {
                    sessionHandle,
                    errors,
                    retVal};
        }
        
        private void OnExecLoggedCompleted(object state) {
            if ((this.ExecLoggedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecLoggedCompleted(this, new ExecLoggedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecLoggedAsync(string inXML, string sessionHandle, bool logRequests, bool logResponses, string errors) {
            this.ExecLoggedAsync(inXML, sessionHandle, logRequests, logResponses, errors, null);
        }
        
        public void ExecLoggedAsync(string inXML, string sessionHandle, bool logRequests, bool logResponses, string errors, object userState) {
            if ((this.onBeginExecLoggedDelegate == null)) {
                this.onBeginExecLoggedDelegate = new BeginOperationDelegate(this.OnBeginExecLogged);
            }
            if ((this.onEndExecLoggedDelegate == null)) {
                this.onEndExecLoggedDelegate = new EndOperationDelegate(this.OnEndExecLogged);
            }
            if ((this.onExecLoggedCompletedDelegate == null)) {
                this.onExecLoggedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecLoggedCompleted);
            }
            base.InvokeAsync(this.onBeginExecLoggedDelegate, new object[] {
                        inXML,
                        sessionHandle,
                        logRequests,
                        logResponses,
                        errors}, this.onEndExecLoggedDelegate, this.onExecLoggedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginExecAnonymous(string site, string inXml, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecAnonymous(site, inXml, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAService.EndExecAnonymous(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndExecAnonymous(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginExecAnonymous(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string site = ((string)(inValues[0]));
            string inXml = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginExecAnonymous(site, inXml, ref errors, callback, asyncState);
        }
        
        private object[] OnEndExecAnonymous(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndExecAnonymous(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnExecAnonymousCompleted(object state) {
            if ((this.ExecAnonymousCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecAnonymousCompleted(this, new ExecAnonymousCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecAnonymousAsync(string site, string inXml, string errors) {
            this.ExecAnonymousAsync(site, inXml, errors, null);
        }
        
        public void ExecAnonymousAsync(string site, string inXml, string errors, object userState) {
            if ((this.onBeginExecAnonymousDelegate == null)) {
                this.onBeginExecAnonymousDelegate = new BeginOperationDelegate(this.OnBeginExecAnonymous);
            }
            if ((this.onEndExecAnonymousDelegate == null)) {
                this.onEndExecAnonymousDelegate = new EndOperationDelegate(this.OnEndExecAnonymous);
            }
            if ((this.onExecAnonymousCompletedDelegate == null)) {
                this.onExecAnonymousCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecAnonymousCompleted);
            }
            base.InvokeAsync(this.onBeginExecAnonymousDelegate, new object[] {
                        site,
                        inXml,
                        errors}, this.onEndExecAnonymousDelegate, this.onExecAnonymousCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginListAvailableSites(ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListAvailableSites(ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAService.EndListAvailableSites(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndListAvailableSites(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginListAvailableSites(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string errors = ((string)(inValues[0]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginListAvailableSites(ref errors, callback, asyncState);
        }
        
        private object[] OnEndListAvailableSites(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndListAvailableSites(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnListAvailableSitesCompleted(object state) {
            if ((this.ListAvailableSitesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListAvailableSitesCompleted(this, new ListAvailableSitesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListAvailableSitesAsync(string errors) {
            this.ListAvailableSitesAsync(errors, null);
        }
        
        public void ListAvailableSitesAsync(string errors, object userState) {
            if ((this.onBeginListAvailableSitesDelegate == null)) {
                this.onBeginListAvailableSitesDelegate = new BeginOperationDelegate(this.OnBeginListAvailableSites);
            }
            if ((this.onEndListAvailableSitesDelegate == null)) {
                this.onEndListAvailableSitesDelegate = new EndOperationDelegate(this.OnEndListAvailableSites);
            }
            if ((this.onListAvailableSitesCompletedDelegate == null)) {
                this.onListAvailableSitesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListAvailableSitesCompleted);
            }
            base.InvokeAsync(this.onBeginListAvailableSitesDelegate, new object[] {
                        errors}, this.onEndListAvailableSitesDelegate, this.onListAvailableSitesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginPing(string sessionHandle, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(sessionHandle, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAService.EndPing(System.IAsyncResult result) {
            return base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionHandle = ((string)(inValues[0]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginPing(sessionHandle, callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new PingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync(string sessionHandle) {
            this.PingAsync(sessionHandle, null);
        }
        
        public void PingAsync(string sessionHandle, object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, new object[] {
                        sessionHandle}, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginPingWithLoad(object payload, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPingWithLoad(payload, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Expanz.ThinRIA.ESAPortal.IESAService.EndPingWithLoad(System.IAsyncResult result) {
            return base.Channel.EndPingWithLoad(result);
        }
        
        private System.IAsyncResult OnBeginPingWithLoad(object[] inValues, System.AsyncCallback callback, object asyncState) {
            object payload = ((object)(inValues[0]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginPingWithLoad(payload, callback, asyncState);
        }
        
        private object[] OnEndPingWithLoad(System.IAsyncResult result) {
            int retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndPingWithLoad(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingWithLoadCompleted(object state) {
            if ((this.PingWithLoadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingWithLoadCompleted(this, new PingWithLoadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingWithLoadAsync(object payload) {
            this.PingWithLoadAsync(payload, null);
        }
        
        public void PingWithLoadAsync(object payload, object userState) {
            if ((this.onBeginPingWithLoadDelegate == null)) {
                this.onBeginPingWithLoadDelegate = new BeginOperationDelegate(this.OnBeginPingWithLoad);
            }
            if ((this.onEndPingWithLoadDelegate == null)) {
                this.onEndPingWithLoadDelegate = new EndOperationDelegate(this.OnEndPingWithLoad);
            }
            if ((this.onPingWithLoadCompletedDelegate == null)) {
                this.onPingWithLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingWithLoadCompleted);
            }
            base.InvokeAsync(this.onBeginPingWithLoadDelegate, new object[] {
                        payload}, this.onEndPingWithLoadDelegate, this.onPingWithLoadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginProcessEDI(string EDIAccessKey, string site, string inXml, string xsdURL, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProcessEDI(EDIAccessKey, site, inXml, xsdURL, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAService.EndProcessEDI(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndProcessEDI(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginProcessEDI(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EDIAccessKey = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string inXml = ((string)(inValues[2]));
            string xsdURL = ((string)(inValues[3]));
            string errors = ((string)(inValues[4]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginProcessEDI(EDIAccessKey, site, inXml, xsdURL, ref errors, callback, asyncState);
        }
        
        private object[] OnEndProcessEDI(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndProcessEDI(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnProcessEDICompleted(object state) {
            if ((this.ProcessEDICompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProcessEDICompleted(this, new ProcessEDICompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProcessEDIAsync(string EDIAccessKey, string site, string inXml, string xsdURL, string errors) {
            this.ProcessEDIAsync(EDIAccessKey, site, inXml, xsdURL, errors, null);
        }
        
        public void ProcessEDIAsync(string EDIAccessKey, string site, string inXml, string xsdURL, string errors, object userState) {
            if ((this.onBeginProcessEDIDelegate == null)) {
                this.onBeginProcessEDIDelegate = new BeginOperationDelegate(this.OnBeginProcessEDI);
            }
            if ((this.onEndProcessEDIDelegate == null)) {
                this.onEndProcessEDIDelegate = new EndOperationDelegate(this.OnEndProcessEDI);
            }
            if ((this.onProcessEDICompletedDelegate == null)) {
                this.onProcessEDICompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProcessEDICompleted);
            }
            base.InvokeAsync(this.onBeginProcessEDIDelegate, new object[] {
                        EDIAccessKey,
                        site,
                        inXml,
                        xsdURL,
                        errors}, this.onEndProcessEDIDelegate, this.onProcessEDICompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginReleaseSession(string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReleaseSession(sessionHandle, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAService.EndReleaseSession(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndReleaseSession(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginReleaseSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionHandle = ((string)(inValues[0]));
            string errors = ((string)(inValues[1]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginReleaseSession(sessionHandle, ref errors, callback, asyncState);
        }
        
        private object[] OnEndReleaseSession(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndReleaseSession(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnReleaseSessionCompleted(object state) {
            if ((this.ReleaseSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReleaseSessionCompleted(this, new ReleaseSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReleaseSessionAsync(string sessionHandle, string errors) {
            this.ReleaseSessionAsync(sessionHandle, errors, null);
        }
        
        public void ReleaseSessionAsync(string sessionHandle, string errors, object userState) {
            if ((this.onBeginReleaseSessionDelegate == null)) {
                this.onBeginReleaseSessionDelegate = new BeginOperationDelegate(this.OnBeginReleaseSession);
            }
            if ((this.onEndReleaseSessionDelegate == null)) {
                this.onEndReleaseSessionDelegate = new EndOperationDelegate(this.OnEndReleaseSession);
            }
            if ((this.onReleaseSessionCompletedDelegate == null)) {
                this.onReleaseSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReleaseSessionCompleted);
            }
            base.InvokeAsync(this.onBeginReleaseSessionDelegate, new object[] {
                        sessionHandle,
                        errors}, this.onEndReleaseSessionDelegate, this.onReleaseSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginTest(string val, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTest(val, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAService.EndTest(System.IAsyncResult result) {
            return base.Channel.EndTest(result);
        }
        
        private System.IAsyncResult OnBeginTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string val = ((string)(inValues[0]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginTest(val, callback, asyncState);
        }
        
        private object[] OnEndTest(System.IAsyncResult result) {
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCompleted(object state) {
            if ((this.TestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCompleted(this, new TestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestAsync(string val) {
            this.TestAsync(val, null);
        }
        
        public void TestAsync(string val, object userState) {
            if ((this.onBeginTestDelegate == null)) {
                this.onBeginTestDelegate = new BeginOperationDelegate(this.OnBeginTest);
            }
            if ((this.onEndTestDelegate == null)) {
                this.onEndTestDelegate = new EndOperationDelegate(this.OnEndTest);
            }
            if ((this.onTestCompletedDelegate == null)) {
                this.onTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCompleted);
            }
            base.InvokeAsync(this.onBeginTestDelegate, new object[] {
                        val}, this.onEndTestDelegate, this.onTestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginTrickleContent(string key, byte[] bytes, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTrickleContent(key, bytes, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Expanz.ThinRIA.ESAPortal.IESAService.EndTrickleContent(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndTrickleContent(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginTrickleContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            byte[] bytes = ((byte[])(inValues[1]));
            string errors = ((string)(inValues[2]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginTrickleContent(key, bytes, ref errors, callback, asyncState);
        }
        
        private object[] OnEndTrickleContent(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            int retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndTrickleContent(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnTrickleContentCompleted(object state) {
            if ((this.TrickleContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TrickleContentCompleted(this, new TrickleContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TrickleContentAsync(string key, byte[] bytes, string errors) {
            this.TrickleContentAsync(key, bytes, errors, null);
        }
        
        public void TrickleContentAsync(string key, byte[] bytes, string errors, object userState) {
            if ((this.onBeginTrickleContentDelegate == null)) {
                this.onBeginTrickleContentDelegate = new BeginOperationDelegate(this.OnBeginTrickleContent);
            }
            if ((this.onEndTrickleContentDelegate == null)) {
                this.onEndTrickleContentDelegate = new EndOperationDelegate(this.OnEndTrickleContent);
            }
            if ((this.onTrickleContentCompletedDelegate == null)) {
                this.onTrickleContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTrickleContentCompleted);
            }
            base.InvokeAsync(this.onBeginTrickleContentDelegate, new object[] {
                        key,
                        bytes,
                        errors}, this.onEndTrickleContentDelegate, this.onTrickleContentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginWebServerPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWebServerPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAService.EndWebServerPing(System.IAsyncResult result) {
            return base.Channel.EndWebServerPing(result);
        }
        
        private System.IAsyncResult OnBeginWebServerPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginWebServerPing(callback, asyncState);
        }
        
        private object[] OnEndWebServerPing(System.IAsyncResult result) {
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndWebServerPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnWebServerPingCompleted(object state) {
            if ((this.WebServerPingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WebServerPingCompleted(this, new WebServerPingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WebServerPingAsync() {
            this.WebServerPingAsync(null);
        }
        
        public void WebServerPingAsync(object userState) {
            if ((this.onBeginWebServerPingDelegate == null)) {
                this.onBeginWebServerPingDelegate = new BeginOperationDelegate(this.OnBeginWebServerPing);
            }
            if ((this.onEndWebServerPingDelegate == null)) {
                this.onEndWebServerPingDelegate = new EndOperationDelegate(this.OnEndWebServerPing);
            }
            if ((this.onWebServerPingCompletedDelegate == null)) {
                this.onWebServerPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWebServerPingCompleted);
            }
            base.InvokeAsync(this.onBeginWebServerPingDelegate, null, this.onEndWebServerPingDelegate, this.onWebServerPingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginSiteManagerPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSiteManagerPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAService.EndSiteManagerPing(System.IAsyncResult result) {
            return base.Channel.EndSiteManagerPing(result);
        }
        
        private System.IAsyncResult OnBeginSiteManagerPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginSiteManagerPing(callback, asyncState);
        }
        
        private object[] OnEndSiteManagerPing(System.IAsyncResult result) {
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndSiteManagerPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSiteManagerPingCompleted(object state) {
            if ((this.SiteManagerPingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SiteManagerPingCompleted(this, new SiteManagerPingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SiteManagerPingAsync() {
            this.SiteManagerPingAsync(null);
        }
        
        public void SiteManagerPingAsync(object userState) {
            if ((this.onBeginSiteManagerPingDelegate == null)) {
                this.onBeginSiteManagerPingDelegate = new BeginOperationDelegate(this.OnBeginSiteManagerPing);
            }
            if ((this.onEndSiteManagerPingDelegate == null)) {
                this.onEndSiteManagerPingDelegate = new EndOperationDelegate(this.OnEndSiteManagerPing);
            }
            if ((this.onSiteManagerPingCompletedDelegate == null)) {
                this.onSiteManagerPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSiteManagerPingCompleted);
            }
            base.InvokeAsync(this.onBeginSiteManagerPingDelegate, null, this.onEndSiteManagerPingDelegate, this.onSiteManagerPingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginGetSchemaForActivity(string site, string activity, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSchemaForActivity(site, activity, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAService.EndGetSchemaForActivity(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndGetSchemaForActivity(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginGetSchemaForActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string site = ((string)(inValues[0]));
            string activity = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginGetSchemaForActivity(site, activity, ref errors, callback, asyncState);
        }
        
        private object[] OnEndGetSchemaForActivity(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndGetSchemaForActivity(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnGetSchemaForActivityCompleted(object state) {
            if ((this.GetSchemaForActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSchemaForActivityCompleted(this, new GetSchemaForActivityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSchemaForActivityAsync(string site, string activity, string errors) {
            this.GetSchemaForActivityAsync(site, activity, errors, null);
        }
        
        public void GetSchemaForActivityAsync(string site, string activity, string errors, object userState) {
            if ((this.onBeginGetSchemaForActivityDelegate == null)) {
                this.onBeginGetSchemaForActivityDelegate = new BeginOperationDelegate(this.OnBeginGetSchemaForActivity);
            }
            if ((this.onEndGetSchemaForActivityDelegate == null)) {
                this.onEndGetSchemaForActivityDelegate = new EndOperationDelegate(this.OnEndGetSchemaForActivity);
            }
            if ((this.onGetSchemaForActivityCompletedDelegate == null)) {
                this.onGetSchemaForActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSchemaForActivityCompleted);
            }
            base.InvokeAsync(this.onBeginGetSchemaForActivityDelegate, new object[] {
                        site,
                        activity,
                        errors}, this.onEndGetSchemaForActivityDelegate, this.onGetSchemaForActivityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAService.BeginListActivitiesForSite(string site, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListActivitiesForSite(site, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAService.EndListActivitiesForSite(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndListActivitiesForSite(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginListActivitiesForSite(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string site = ((string)(inValues[0]));
            string errors = ((string)(inValues[1]));
            return ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).BeginListActivitiesForSite(site, ref errors, callback, asyncState);
        }
        
        private object[] OnEndListActivitiesForSite(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAService)(this)).EndListActivitiesForSite(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnListActivitiesForSiteCompleted(object state) {
            if ((this.ListActivitiesForSiteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListActivitiesForSiteCompleted(this, new ListActivitiesForSiteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListActivitiesForSiteAsync(string site, string errors) {
            this.ListActivitiesForSiteAsync(site, errors, null);
        }
        
        public void ListActivitiesForSiteAsync(string site, string errors, object userState) {
            if ((this.onBeginListActivitiesForSiteDelegate == null)) {
                this.onBeginListActivitiesForSiteDelegate = new BeginOperationDelegate(this.OnBeginListActivitiesForSite);
            }
            if ((this.onEndListActivitiesForSiteDelegate == null)) {
                this.onEndListActivitiesForSiteDelegate = new EndOperationDelegate(this.OnEndListActivitiesForSite);
            }
            if ((this.onListActivitiesForSiteCompletedDelegate == null)) {
                this.onListActivitiesForSiteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListActivitiesForSiteCompleted);
            }
            base.InvokeAsync(this.onBeginListActivitiesForSiteDelegate, new object[] {
                        site,
                        errors}, this.onEndListActivitiesForSiteDelegate, this.onListActivitiesForSiteCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Expanz.ThinRIA.ESAPortal.IESAService CreateChannel() {
            return new ESAServiceClientChannel(this);
        }
        
        private class ESAServiceClientChannel : ChannelBase<Expanz.ThinRIA.ESAPortal.IESAService>, Expanz.ThinRIA.ESAPortal.IESAService {
            
            public ESAServiceClientChannel(System.ServiceModel.ClientBase<Expanz.ThinRIA.ESAPortal.IESAService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = user;
                _args[1] = oldPassword;
                _args[2] = newPassword;
                _args[3] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ChangeUserPassword", _args, callback, asyncState);
                errors = ((string)(_args[3]));
                return _result;
            }
            
            public bool EndChangeUserPassword(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("ChangeUserPassword", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateSession(string inXml, ref string errorMessage, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = inXml;
                _args[1] = errorMessage;
                System.IAsyncResult _result = base.BeginInvoke("CreateSession", _args, callback, asyncState);
                errorMessage = ((string)(_args[1]));
                return _result;
            }
            
            public string EndCreateSession(ref string errorMessage, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errorMessage;
                string _result = ((string)(base.EndInvoke("CreateSession", _args, result)));
                errorMessage = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginExec(string inXML, ref string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = inXML;
                _args[1] = sessionHandle;
                _args[2] = errors;
                System.IAsyncResult _result = base.BeginInvoke("Exec", _args, callback, asyncState);
                sessionHandle = ((string)(_args[1]));
                errors = ((string)(_args[2]));
                return _result;
            }
            
            public string EndExec(ref string sessionHandle, ref string errors, System.IAsyncResult result) {
                object[] _args = new object[2];
                _args[0] = sessionHandle;
                _args[1] = errors;
                string _result = ((string)(base.EndInvoke("Exec", _args, result)));
                sessionHandle = ((string)(_args[0]));
                errors = ((string)(_args[1]));
                return _result;
            }
            
            public System.IAsyncResult BeginExecTimed(string inXML, ref string sessionHandle, ref string errors, ref long responseTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = inXML;
                _args[1] = sessionHandle;
                _args[2] = errors;
                _args[3] = responseTime;
                System.IAsyncResult _result = base.BeginInvoke("ExecTimed", _args, callback, asyncState);
                sessionHandle = ((string)(_args[1]));
                errors = ((string)(_args[2]));
                responseTime = ((long)(_args[3]));
                return _result;
            }
            
            public string EndExecTimed(ref string sessionHandle, ref string errors, ref long responseTime, System.IAsyncResult result) {
                object[] _args = new object[3];
                _args[0] = sessionHandle;
                _args[1] = errors;
                _args[2] = responseTime;
                string _result = ((string)(base.EndInvoke("ExecTimed", _args, result)));
                sessionHandle = ((string)(_args[0]));
                errors = ((string)(_args[1]));
                responseTime = ((long)(_args[2]));
                return _result;
            }
            
            public System.IAsyncResult BeginExecLogged(string inXML, ref string sessionHandle, bool logRequests, bool logResponses, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = inXML;
                _args[1] = sessionHandle;
                _args[2] = logRequests;
                _args[3] = logResponses;
                _args[4] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ExecLogged", _args, callback, asyncState);
                sessionHandle = ((string)(_args[1]));
                errors = ((string)(_args[4]));
                return _result;
            }
            
            public string EndExecLogged(ref string sessionHandle, ref string errors, System.IAsyncResult result) {
                object[] _args = new object[2];
                _args[0] = sessionHandle;
                _args[1] = errors;
                string _result = ((string)(base.EndInvoke("ExecLogged", _args, result)));
                sessionHandle = ((string)(_args[0]));
                errors = ((string)(_args[1]));
                return _result;
            }
            
            public System.IAsyncResult BeginExecAnonymous(string site, string inXml, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = site;
                _args[1] = inXml;
                _args[2] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ExecAnonymous", _args, callback, asyncState);
                errors = ((string)(_args[2]));
                return _result;
            }
            
            public string EndExecAnonymous(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                string _result = ((string)(base.EndInvoke("ExecAnonymous", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginListAvailableSites(ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ListAvailableSites", _args, callback, asyncState);
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public string EndListAvailableSites(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                string _result = ((string)(base.EndInvoke("ListAvailableSites", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginPing(string sessionHandle, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sessionHandle;
                System.IAsyncResult _result = base.BeginInvoke("Ping", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPing(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Ping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPingWithLoad(object payload, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = payload;
                System.IAsyncResult _result = base.BeginInvoke("PingWithLoad", _args, callback, asyncState);
                return _result;
            }
            
            public int EndPingWithLoad(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("PingWithLoad", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginProcessEDI(string EDIAccessKey, string site, string inXml, string xsdURL, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = EDIAccessKey;
                _args[1] = site;
                _args[2] = inXml;
                _args[3] = xsdURL;
                _args[4] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ProcessEDI", _args, callback, asyncState);
                errors = ((string)(_args[4]));
                return _result;
            }
            
            public string EndProcessEDI(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                string _result = ((string)(base.EndInvoke("ProcessEDI", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginReleaseSession(string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sessionHandle;
                _args[1] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ReleaseSession", _args, callback, asyncState);
                errors = ((string)(_args[1]));
                return _result;
            }
            
            public bool EndReleaseSession(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("ReleaseSession", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginTest(string val, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = val;
                System.IAsyncResult _result = base.BeginInvoke("Test", _args, callback, asyncState);
                return _result;
            }
            
            public string EndTest(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Test", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTrickleContent(string key, byte[] bytes, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = bytes;
                _args[2] = errors;
                System.IAsyncResult _result = base.BeginInvoke("TrickleContent", _args, callback, asyncState);
                errors = ((string)(_args[2]));
                return _result;
            }
            
            public int EndTrickleContent(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                int _result = ((int)(base.EndInvoke("TrickleContent", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginWebServerPing(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("WebServerPing", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndWebServerPing(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("WebServerPing", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSiteManagerPing(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("SiteManagerPing", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSiteManagerPing(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SiteManagerPing", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSchemaForActivity(string site, string activity, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = site;
                _args[1] = activity;
                _args[2] = errors;
                System.IAsyncResult _result = base.BeginInvoke("GetSchemaForActivity", _args, callback, asyncState);
                errors = ((string)(_args[2]));
                return _result;
            }
            
            public string EndGetSchemaForActivity(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                string _result = ((string)(base.EndInvoke("GetSchemaForActivity", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginListActivitiesForSite(string site, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = site;
                _args[1] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ListActivitiesForSite", _args, callback, asyncState);
                errors = ((string)(_args[1]));
                return _result;
            }
            
            public string EndListActivitiesForSite(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                string _result = ((string)(base.EndInvoke("ListActivitiesForSite", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.expanz.com/ESAAdminService", ConfigurationName="ESAPortal.IESAAdminService")]
    public interface IESAAdminService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/AddSite", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/AddSiteResponse")]
        System.IAsyncResult BeginAddSite(string masterPassword, string site, string name, string authMethod, ref string messages, System.AsyncCallback callback, object asyncState);
        
        bool EndAddSite(ref string messages, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/BroadcastMessage", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/BroadcastMessageResponse")]
        System.IAsyncResult BeginBroadcastMessage(string masterPassword, string site, string message, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndBroadcastMessage(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ChangeUserPassword", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ChangeUserPasswordResponse" +
            "")]
        System.IAsyncResult BeginChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndChangeUserPassword(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateAdminSession", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateAdminSessionResponse" +
            "")]
        System.IAsyncResult BeginCreateAdminSession(string user, string password, ref string errorMessage, System.AsyncCallback callback, object asyncState);
        
        string EndCreateAdminSession(ref string errorMessage, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateUser", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateUserResponse")]
        System.IAsyncResult BeginCreateUser(string masterPassword, string user, string description, string userPassword, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndCreateUser(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/DeleteUser", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(string masterPassword, string user, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteUser(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/DisableSessionManager", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/DisableSessionManagerRespo" +
            "nse")]
        System.IAsyncResult BeginDisableSessionManager(string masterPassword, string site, string SessionManagerURI, bool disable, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndDisableSessionManager(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionManagersForSite" +
            "", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionManagersForSite" +
            "Response")]
        System.IAsyncResult BeginListSessionManagersForSite(string masterPassword, string site, ref string messages, System.AsyncCallback callback, object asyncState);
        
        string EndListSessionManagersForSite(ref string messages, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionsForServer", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionsForServerRespo" +
            "nse")]
        System.IAsyncResult BeginListSessionsForServer(string serverURI, string password, ref string messages, System.AsyncCallback callback, object asyncState);
        
        string EndListSessionsForServer(ref string messages, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ListUsers", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ListUsersResponse")]
        System.IAsyncResult BeginListUsers(string masterPassword, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndListUsers(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ResetUserPassword", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ResetUserPasswordResponse")]
        System.IAsyncResult BeginResetUserPassword(string masterPassword, string user, string password, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndResetUserPassword(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/SetSessionManagerLoggingPr" +
            "ofile", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/SetSessionManagerLoggingPr" +
            "ofileResponse")]
        System.IAsyncResult BeginSetSessionManagerLoggingProfile(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndSetSessionManagerLoggingProfile(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsBegin", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsBeginRespons" +
            "e")]
        System.IAsyncResult BeginExportAllBlobsBegin(string masterPassword, string site, string accountName, string accountKey, ref string handle, ref string errors, ref int totalBlobs, System.AsyncCallback callback, object asyncState);
        
        bool EndExportAllBlobsBegin(ref string handle, ref string errors, ref int totalBlobs, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsChunk", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsChunkRespons" +
            "e")]
        System.IAsyncResult BeginExportAllBlobsChunk(string sessionHandle, ref string messages, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndExportAllBlobsChunk(ref string messages, ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsCleanup", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsCleanupRespo" +
            "nse")]
        System.IAsyncResult BeginExportAllBlobsCleanup(string sessionHandle, bool ok, System.AsyncCallback callback, object asyncState);
        
        void EndExportAllBlobsCleanup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/SyncronisePersistentSchema" +
            "", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/SyncronisePersistentSchema" +
            "Response")]
        System.IAsyncResult BeginSyncronisePersistentSchema(string masterPassword, string site, ref string messages, ref string errors, ref string DBML, bool apply, ref string script, System.AsyncCallback callback, object asyncState);
        
        bool EndSyncronisePersistentSchema(ref string messages, ref string errors, ref string DBML, ref string script, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/TerminateSession", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/TerminateSessionResponse")]
        System.IAsyncResult BeginTerminateSession(string site, string serverURI, string sessionHandle, string password, ref string messages, System.AsyncCallback callback, object asyncState);
        
        bool EndTerminateSession(ref string messages, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/SetTraceLogging", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/SetTraceLoggingResponse")]
        System.IAsyncResult BeginSetTraceLogging(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndSetTraceLogging(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/StopTraceLogging", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/StopTraceLoggingResponse")]
        System.IAsyncResult BeginStopTraceLogging(string masterPassword, string guid, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndStopTraceLogging(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceLogs", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceLogsResponse")]
        System.IAsyncResult BeginGetTraceLogs(string masterPassword, string site, bool activeOnly, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndGetTraceLogs(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceDetail", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceDetailResponse")]
        System.IAsyncResult BeginGetTraceDetail(string masterPassword, string guid, bool requestOnly, ref string errors, string sessionId, ref bool hasMoreRows, System.AsyncCallback callback, object asyncState);
        
        string EndGetTraceDetail(ref string errors, ref bool hasMoreRows, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/EnableDiagnostics", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/EnableDiagnosticsResponse")]
        System.IAsyncResult BeginEnableDiagnostics(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndEnableDiagnostics(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/GetLogsDetails", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/GetLogsDetailsResponse")]
        System.IAsyncResult BeginGetLogsDetails(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndGetLogsDetails(ref string errors, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IESAAdminServiceChannel : Expanz.ThinRIA.ESAPortal.IESAAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BroadcastMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BroadcastMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeUserPasswordCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeUserPasswordCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateAdminSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateAdminSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errorMessage {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisableSessionManagerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisableSessionManagerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListSessionManagersForSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListSessionManagersForSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListSessionsForServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListSessionsForServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResetUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetSessionManagerLoggingProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetSessionManagerLoggingProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExportAllBlobsBeginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExportAllBlobsBeginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string handle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public int totalBlobs {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExportAllBlobsChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExportAllBlobsChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SyncronisePersistentSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SyncronisePersistentSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string DBML {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string script {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TerminateSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TerminateSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetTraceLoggingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetTraceLoggingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StopTraceLoggingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StopTraceLoggingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTraceLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTraceLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTraceDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTraceDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool hasMoreRows {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EnableDiagnosticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EnableDiagnosticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLogsDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLogsDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ESAAdminServiceClient : System.ServiceModel.ClientBase<Expanz.ThinRIA.ESAPortal.IESAAdminService>, Expanz.ThinRIA.ESAPortal.IESAAdminService {
        
        private BeginOperationDelegate onBeginAddSiteDelegate;
        
        private EndOperationDelegate onEndAddSiteDelegate;
        
        private System.Threading.SendOrPostCallback onAddSiteCompletedDelegate;
        
        private BeginOperationDelegate onBeginBroadcastMessageDelegate;
        
        private EndOperationDelegate onEndBroadcastMessageDelegate;
        
        private System.Threading.SendOrPostCallback onBroadcastMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeUserPasswordDelegate;
        
        private EndOperationDelegate onEndChangeUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onChangeUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateAdminSessionDelegate;
        
        private EndOperationDelegate onEndCreateAdminSessionDelegate;
        
        private System.Threading.SendOrPostCallback onCreateAdminSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateUserDelegate;
        
        private EndOperationDelegate onEndCreateUserDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisableSessionManagerDelegate;
        
        private EndOperationDelegate onEndDisableSessionManagerDelegate;
        
        private System.Threading.SendOrPostCallback onDisableSessionManagerCompletedDelegate;
        
        private BeginOperationDelegate onBeginListSessionManagersForSiteDelegate;
        
        private EndOperationDelegate onEndListSessionManagersForSiteDelegate;
        
        private System.Threading.SendOrPostCallback onListSessionManagersForSiteCompletedDelegate;
        
        private BeginOperationDelegate onBeginListSessionsForServerDelegate;
        
        private EndOperationDelegate onEndListSessionsForServerDelegate;
        
        private System.Threading.SendOrPostCallback onListSessionsForServerCompletedDelegate;
        
        private BeginOperationDelegate onBeginListUsersDelegate;
        
        private EndOperationDelegate onEndListUsersDelegate;
        
        private System.Threading.SendOrPostCallback onListUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetUserPasswordDelegate;
        
        private EndOperationDelegate onEndResetUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onResetUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetSessionManagerLoggingProfileDelegate;
        
        private EndOperationDelegate onEndSetSessionManagerLoggingProfileDelegate;
        
        private System.Threading.SendOrPostCallback onSetSessionManagerLoggingProfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportAllBlobsBeginDelegate;
        
        private EndOperationDelegate onEndExportAllBlobsBeginDelegate;
        
        private System.Threading.SendOrPostCallback onExportAllBlobsBeginCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportAllBlobsChunkDelegate;
        
        private EndOperationDelegate onEndExportAllBlobsChunkDelegate;
        
        private System.Threading.SendOrPostCallback onExportAllBlobsChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportAllBlobsCleanupDelegate;
        
        private EndOperationDelegate onEndExportAllBlobsCleanupDelegate;
        
        private System.Threading.SendOrPostCallback onExportAllBlobsCleanupCompletedDelegate;
        
        private BeginOperationDelegate onBeginSyncronisePersistentSchemaDelegate;
        
        private EndOperationDelegate onEndSyncronisePersistentSchemaDelegate;
        
        private System.Threading.SendOrPostCallback onSyncronisePersistentSchemaCompletedDelegate;
        
        private BeginOperationDelegate onBeginTerminateSessionDelegate;
        
        private EndOperationDelegate onEndTerminateSessionDelegate;
        
        private System.Threading.SendOrPostCallback onTerminateSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetTraceLoggingDelegate;
        
        private EndOperationDelegate onEndSetTraceLoggingDelegate;
        
        private System.Threading.SendOrPostCallback onSetTraceLoggingCompletedDelegate;
        
        private BeginOperationDelegate onBeginStopTraceLoggingDelegate;
        
        private EndOperationDelegate onEndStopTraceLoggingDelegate;
        
        private System.Threading.SendOrPostCallback onStopTraceLoggingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTraceLogsDelegate;
        
        private EndOperationDelegate onEndGetTraceLogsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTraceLogsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTraceDetailDelegate;
        
        private EndOperationDelegate onEndGetTraceDetailDelegate;
        
        private System.Threading.SendOrPostCallback onGetTraceDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginEnableDiagnosticsDelegate;
        
        private EndOperationDelegate onEndEnableDiagnosticsDelegate;
        
        private System.Threading.SendOrPostCallback onEnableDiagnosticsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLogsDetailsDelegate;
        
        private EndOperationDelegate onEndGetLogsDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetLogsDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ESAAdminServiceClient() {
        }
        
        public ESAAdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ESAAdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ESAAdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ESAAdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AddSiteCompletedEventArgs> AddSiteCompleted;
        
        public event System.EventHandler<BroadcastMessageCompletedEventArgs> BroadcastMessageCompleted;
        
        public event System.EventHandler<ChangeUserPasswordCompletedEventArgs1> ChangeUserPasswordCompleted;
        
        public event System.EventHandler<CreateAdminSessionCompletedEventArgs> CreateAdminSessionCompleted;
        
        public event System.EventHandler<CreateUserCompletedEventArgs> CreateUserCompleted;
        
        public event System.EventHandler<DeleteUserCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<DisableSessionManagerCompletedEventArgs> DisableSessionManagerCompleted;
        
        public event System.EventHandler<ListSessionManagersForSiteCompletedEventArgs> ListSessionManagersForSiteCompleted;
        
        public event System.EventHandler<ListSessionsForServerCompletedEventArgs> ListSessionsForServerCompleted;
        
        public event System.EventHandler<ListUsersCompletedEventArgs> ListUsersCompleted;
        
        public event System.EventHandler<ResetUserPasswordCompletedEventArgs> ResetUserPasswordCompleted;
        
        public event System.EventHandler<SetSessionManagerLoggingProfileCompletedEventArgs> SetSessionManagerLoggingProfileCompleted;
        
        public event System.EventHandler<ExportAllBlobsBeginCompletedEventArgs> ExportAllBlobsBeginCompleted;
        
        public event System.EventHandler<ExportAllBlobsChunkCompletedEventArgs> ExportAllBlobsChunkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExportAllBlobsCleanupCompleted;
        
        public event System.EventHandler<SyncronisePersistentSchemaCompletedEventArgs> SyncronisePersistentSchemaCompleted;
        
        public event System.EventHandler<TerminateSessionCompletedEventArgs> TerminateSessionCompleted;
        
        public event System.EventHandler<SetTraceLoggingCompletedEventArgs> SetTraceLoggingCompleted;
        
        public event System.EventHandler<StopTraceLoggingCompletedEventArgs> StopTraceLoggingCompleted;
        
        public event System.EventHandler<GetTraceLogsCompletedEventArgs> GetTraceLogsCompleted;
        
        public event System.EventHandler<GetTraceDetailCompletedEventArgs> GetTraceDetailCompleted;
        
        public event System.EventHandler<EnableDiagnosticsCompletedEventArgs> EnableDiagnosticsCompleted;
        
        public event System.EventHandler<GetLogsDetailsCompletedEventArgs> GetLogsDetailsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginAddSite(string masterPassword, string site, string name, string authMethod, ref string messages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSite(masterPassword, site, name, authMethod, ref messages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndAddSite(ref string messages, System.IAsyncResult result) {
            return base.Channel.EndAddSite(ref messages, result);
        }
        
        private System.IAsyncResult OnBeginAddSite(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            string authMethod = ((string)(inValues[3]));
            string messages = ((string)(inValues[4]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginAddSite(masterPassword, site, name, authMethod, ref messages, callback, asyncState);
        }
        
        private object[] OnEndAddSite(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndAddSite(ref messages, result);
            return new object[] {
                    messages,
                    retVal};
        }
        
        private void OnAddSiteCompleted(object state) {
            if ((this.AddSiteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSiteCompleted(this, new AddSiteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSiteAsync(string masterPassword, string site, string name, string authMethod, string messages) {
            this.AddSiteAsync(masterPassword, site, name, authMethod, messages, null);
        }
        
        public void AddSiteAsync(string masterPassword, string site, string name, string authMethod, string messages, object userState) {
            if ((this.onBeginAddSiteDelegate == null)) {
                this.onBeginAddSiteDelegate = new BeginOperationDelegate(this.OnBeginAddSite);
            }
            if ((this.onEndAddSiteDelegate == null)) {
                this.onEndAddSiteDelegate = new EndOperationDelegate(this.OnEndAddSite);
            }
            if ((this.onAddSiteCompletedDelegate == null)) {
                this.onAddSiteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSiteCompleted);
            }
            base.InvokeAsync(this.onBeginAddSiteDelegate, new object[] {
                        masterPassword,
                        site,
                        name,
                        authMethod,
                        messages}, this.onEndAddSiteDelegate, this.onAddSiteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginBroadcastMessage(string masterPassword, string site, string message, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBroadcastMessage(masterPassword, site, message, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAAdminService.EndBroadcastMessage(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndBroadcastMessage(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginBroadcastMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string message = ((string)(inValues[2]));
            string errors = ((string)(inValues[3]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginBroadcastMessage(masterPassword, site, message, ref errors, callback, asyncState);
        }
        
        private object[] OnEndBroadcastMessage(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndBroadcastMessage(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnBroadcastMessageCompleted(object state) {
            if ((this.BroadcastMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BroadcastMessageCompleted(this, new BroadcastMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BroadcastMessageAsync(string masterPassword, string site, string message, string errors) {
            this.BroadcastMessageAsync(masterPassword, site, message, errors, null);
        }
        
        public void BroadcastMessageAsync(string masterPassword, string site, string message, string errors, object userState) {
            if ((this.onBeginBroadcastMessageDelegate == null)) {
                this.onBeginBroadcastMessageDelegate = new BeginOperationDelegate(this.OnBeginBroadcastMessage);
            }
            if ((this.onEndBroadcastMessageDelegate == null)) {
                this.onEndBroadcastMessageDelegate = new EndOperationDelegate(this.OnEndBroadcastMessage);
            }
            if ((this.onBroadcastMessageCompletedDelegate == null)) {
                this.onBroadcastMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBroadcastMessageCompleted);
            }
            base.InvokeAsync(this.onBeginBroadcastMessageDelegate, new object[] {
                        masterPassword,
                        site,
                        message,
                        errors}, this.onEndBroadcastMessageDelegate, this.onBroadcastMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeUserPassword(user, oldPassword, newPassword, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndChangeUserPassword(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndChangeUserPassword(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginChangeUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string oldPassword = ((string)(inValues[1]));
            string newPassword = ((string)(inValues[2]));
            string errors = ((string)(inValues[3]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginChangeUserPassword(user, oldPassword, newPassword, ref errors, callback, asyncState);
        }
        
        private object[] OnEndChangeUserPassword(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndChangeUserPassword(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnChangeUserPasswordCompleted(object state) {
            if ((this.ChangeUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeUserPasswordCompleted(this, new ChangeUserPasswordCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeUserPasswordAsync(string user, string oldPassword, string newPassword, string errors) {
            this.ChangeUserPasswordAsync(user, oldPassword, newPassword, errors, null);
        }
        
        public void ChangeUserPasswordAsync(string user, string oldPassword, string newPassword, string errors, object userState) {
            if ((this.onBeginChangeUserPasswordDelegate == null)) {
                this.onBeginChangeUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginChangeUserPassword);
            }
            if ((this.onEndChangeUserPasswordDelegate == null)) {
                this.onEndChangeUserPasswordDelegate = new EndOperationDelegate(this.OnEndChangeUserPassword);
            }
            if ((this.onChangeUserPasswordCompletedDelegate == null)) {
                this.onChangeUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginChangeUserPasswordDelegate, new object[] {
                        user,
                        oldPassword,
                        newPassword,
                        errors}, this.onEndChangeUserPasswordDelegate, this.onChangeUserPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginCreateAdminSession(string user, string password, ref string errorMessage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateAdminSession(user, password, ref errorMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAAdminService.EndCreateAdminSession(ref string errorMessage, System.IAsyncResult result) {
            return base.Channel.EndCreateAdminSession(ref errorMessage, result);
        }
        
        private System.IAsyncResult OnBeginCreateAdminSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string errorMessage = ((string)(inValues[2]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginCreateAdminSession(user, password, ref errorMessage, callback, asyncState);
        }
        
        private object[] OnEndCreateAdminSession(System.IAsyncResult result) {
            string errorMessage = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndCreateAdminSession(ref errorMessage, result);
            return new object[] {
                    errorMessage,
                    retVal};
        }
        
        private void OnCreateAdminSessionCompleted(object state) {
            if ((this.CreateAdminSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateAdminSessionCompleted(this, new CreateAdminSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAdminSessionAsync(string user, string password, string errorMessage) {
            this.CreateAdminSessionAsync(user, password, errorMessage, null);
        }
        
        public void CreateAdminSessionAsync(string user, string password, string errorMessage, object userState) {
            if ((this.onBeginCreateAdminSessionDelegate == null)) {
                this.onBeginCreateAdminSessionDelegate = new BeginOperationDelegate(this.OnBeginCreateAdminSession);
            }
            if ((this.onEndCreateAdminSessionDelegate == null)) {
                this.onEndCreateAdminSessionDelegate = new EndOperationDelegate(this.OnEndCreateAdminSession);
            }
            if ((this.onCreateAdminSessionCompletedDelegate == null)) {
                this.onCreateAdminSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateAdminSessionCompleted);
            }
            base.InvokeAsync(this.onBeginCreateAdminSessionDelegate, new object[] {
                        user,
                        password,
                        errorMessage}, this.onEndCreateAdminSessionDelegate, this.onCreateAdminSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginCreateUser(string masterPassword, string user, string description, string userPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateUser(masterPassword, user, description, userPassword, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndCreateUser(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndCreateUser(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginCreateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string user = ((string)(inValues[1]));
            string description = ((string)(inValues[2]));
            string userPassword = ((string)(inValues[3]));
            string errors = ((string)(inValues[4]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginCreateUser(masterPassword, user, description, userPassword, ref errors, callback, asyncState);
        }
        
        private object[] OnEndCreateUser(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndCreateUser(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnCreateUserCompleted(object state) {
            if ((this.CreateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserAsync(string masterPassword, string user, string description, string userPassword, string errors) {
            this.CreateUserAsync(masterPassword, user, description, userPassword, errors, null);
        }
        
        public void CreateUserAsync(string masterPassword, string user, string description, string userPassword, string errors, object userState) {
            if ((this.onBeginCreateUserDelegate == null)) {
                this.onBeginCreateUserDelegate = new BeginOperationDelegate(this.OnBeginCreateUser);
            }
            if ((this.onEndCreateUserDelegate == null)) {
                this.onEndCreateUserDelegate = new EndOperationDelegate(this.OnEndCreateUser);
            }
            if ((this.onCreateUserCompletedDelegate == null)) {
                this.onCreateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserDelegate, new object[] {
                        masterPassword,
                        user,
                        description,
                        userPassword,
                        errors}, this.onEndCreateUserDelegate, this.onCreateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginDeleteUser(string masterPassword, string user, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(masterPassword, user, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndDeleteUser(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndDeleteUser(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string user = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginDeleteUser(masterPassword, user, ref errors, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndDeleteUser(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(string masterPassword, string user, string errors) {
            this.DeleteUserAsync(masterPassword, user, errors, null);
        }
        
        public void DeleteUserAsync(string masterPassword, string user, string errors, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        masterPassword,
                        user,
                        errors}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginDisableSessionManager(string masterPassword, string site, string SessionManagerURI, bool disable, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisableSessionManager(masterPassword, site, SessionManagerURI, disable, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndDisableSessionManager(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndDisableSessionManager(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginDisableSessionManager(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string SessionManagerURI = ((string)(inValues[2]));
            bool disable = ((bool)(inValues[3]));
            string errors = ((string)(inValues[4]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginDisableSessionManager(masterPassword, site, SessionManagerURI, disable, ref errors, callback, asyncState);
        }
        
        private object[] OnEndDisableSessionManager(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndDisableSessionManager(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnDisableSessionManagerCompleted(object state) {
            if ((this.DisableSessionManagerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisableSessionManagerCompleted(this, new DisableSessionManagerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisableSessionManagerAsync(string masterPassword, string site, string SessionManagerURI, bool disable, string errors) {
            this.DisableSessionManagerAsync(masterPassword, site, SessionManagerURI, disable, errors, null);
        }
        
        public void DisableSessionManagerAsync(string masterPassword, string site, string SessionManagerURI, bool disable, string errors, object userState) {
            if ((this.onBeginDisableSessionManagerDelegate == null)) {
                this.onBeginDisableSessionManagerDelegate = new BeginOperationDelegate(this.OnBeginDisableSessionManager);
            }
            if ((this.onEndDisableSessionManagerDelegate == null)) {
                this.onEndDisableSessionManagerDelegate = new EndOperationDelegate(this.OnEndDisableSessionManager);
            }
            if ((this.onDisableSessionManagerCompletedDelegate == null)) {
                this.onDisableSessionManagerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisableSessionManagerCompleted);
            }
            base.InvokeAsync(this.onBeginDisableSessionManagerDelegate, new object[] {
                        masterPassword,
                        site,
                        SessionManagerURI,
                        disable,
                        errors}, this.onEndDisableSessionManagerDelegate, this.onDisableSessionManagerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginListSessionManagersForSite(string masterPassword, string site, ref string messages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListSessionManagersForSite(masterPassword, site, ref messages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAAdminService.EndListSessionManagersForSite(ref string messages, System.IAsyncResult result) {
            return base.Channel.EndListSessionManagersForSite(ref messages, result);
        }
        
        private System.IAsyncResult OnBeginListSessionManagersForSite(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string messages = ((string)(inValues[2]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginListSessionManagersForSite(masterPassword, site, ref messages, callback, asyncState);
        }
        
        private object[] OnEndListSessionManagersForSite(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndListSessionManagersForSite(ref messages, result);
            return new object[] {
                    messages,
                    retVal};
        }
        
        private void OnListSessionManagersForSiteCompleted(object state) {
            if ((this.ListSessionManagersForSiteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListSessionManagersForSiteCompleted(this, new ListSessionManagersForSiteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListSessionManagersForSiteAsync(string masterPassword, string site, string messages) {
            this.ListSessionManagersForSiteAsync(masterPassword, site, messages, null);
        }
        
        public void ListSessionManagersForSiteAsync(string masterPassword, string site, string messages, object userState) {
            if ((this.onBeginListSessionManagersForSiteDelegate == null)) {
                this.onBeginListSessionManagersForSiteDelegate = new BeginOperationDelegate(this.OnBeginListSessionManagersForSite);
            }
            if ((this.onEndListSessionManagersForSiteDelegate == null)) {
                this.onEndListSessionManagersForSiteDelegate = new EndOperationDelegate(this.OnEndListSessionManagersForSite);
            }
            if ((this.onListSessionManagersForSiteCompletedDelegate == null)) {
                this.onListSessionManagersForSiteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListSessionManagersForSiteCompleted);
            }
            base.InvokeAsync(this.onBeginListSessionManagersForSiteDelegate, new object[] {
                        masterPassword,
                        site,
                        messages}, this.onEndListSessionManagersForSiteDelegate, this.onListSessionManagersForSiteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginListSessionsForServer(string serverURI, string password, ref string messages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListSessionsForServer(serverURI, password, ref messages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAAdminService.EndListSessionsForServer(ref string messages, System.IAsyncResult result) {
            return base.Channel.EndListSessionsForServer(ref messages, result);
        }
        
        private System.IAsyncResult OnBeginListSessionsForServer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverURI = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string messages = ((string)(inValues[2]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginListSessionsForServer(serverURI, password, ref messages, callback, asyncState);
        }
        
        private object[] OnEndListSessionsForServer(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndListSessionsForServer(ref messages, result);
            return new object[] {
                    messages,
                    retVal};
        }
        
        private void OnListSessionsForServerCompleted(object state) {
            if ((this.ListSessionsForServerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListSessionsForServerCompleted(this, new ListSessionsForServerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListSessionsForServerAsync(string serverURI, string password, string messages) {
            this.ListSessionsForServerAsync(serverURI, password, messages, null);
        }
        
        public void ListSessionsForServerAsync(string serverURI, string password, string messages, object userState) {
            if ((this.onBeginListSessionsForServerDelegate == null)) {
                this.onBeginListSessionsForServerDelegate = new BeginOperationDelegate(this.OnBeginListSessionsForServer);
            }
            if ((this.onEndListSessionsForServerDelegate == null)) {
                this.onEndListSessionsForServerDelegate = new EndOperationDelegate(this.OnEndListSessionsForServer);
            }
            if ((this.onListSessionsForServerCompletedDelegate == null)) {
                this.onListSessionsForServerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListSessionsForServerCompleted);
            }
            base.InvokeAsync(this.onBeginListSessionsForServerDelegate, new object[] {
                        serverURI,
                        password,
                        messages}, this.onEndListSessionsForServerDelegate, this.onListSessionsForServerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginListUsers(string masterPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListUsers(masterPassword, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAAdminService.EndListUsers(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndListUsers(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginListUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string errors = ((string)(inValues[1]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginListUsers(masterPassword, ref errors, callback, asyncState);
        }
        
        private object[] OnEndListUsers(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndListUsers(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnListUsersCompleted(object state) {
            if ((this.ListUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListUsersCompleted(this, new ListUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListUsersAsync(string masterPassword, string errors) {
            this.ListUsersAsync(masterPassword, errors, null);
        }
        
        public void ListUsersAsync(string masterPassword, string errors, object userState) {
            if ((this.onBeginListUsersDelegate == null)) {
                this.onBeginListUsersDelegate = new BeginOperationDelegate(this.OnBeginListUsers);
            }
            if ((this.onEndListUsersDelegate == null)) {
                this.onEndListUsersDelegate = new EndOperationDelegate(this.OnEndListUsers);
            }
            if ((this.onListUsersCompletedDelegate == null)) {
                this.onListUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListUsersCompleted);
            }
            base.InvokeAsync(this.onBeginListUsersDelegate, new object[] {
                        masterPassword,
                        errors}, this.onEndListUsersDelegate, this.onListUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginResetUserPassword(string masterPassword, string user, string password, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetUserPassword(masterPassword, user, password, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndResetUserPassword(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndResetUserPassword(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginResetUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string user = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            string errors = ((string)(inValues[3]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginResetUserPassword(masterPassword, user, password, ref errors, callback, asyncState);
        }
        
        private object[] OnEndResetUserPassword(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndResetUserPassword(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnResetUserPasswordCompleted(object state) {
            if ((this.ResetUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetUserPasswordCompleted(this, new ResetUserPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetUserPasswordAsync(string masterPassword, string user, string password, string errors) {
            this.ResetUserPasswordAsync(masterPassword, user, password, errors, null);
        }
        
        public void ResetUserPasswordAsync(string masterPassword, string user, string password, string errors, object userState) {
            if ((this.onBeginResetUserPasswordDelegate == null)) {
                this.onBeginResetUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginResetUserPassword);
            }
            if ((this.onEndResetUserPasswordDelegate == null)) {
                this.onEndResetUserPasswordDelegate = new EndOperationDelegate(this.OnEndResetUserPassword);
            }
            if ((this.onResetUserPasswordCompletedDelegate == null)) {
                this.onResetUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginResetUserPasswordDelegate, new object[] {
                        masterPassword,
                        user,
                        password,
                        errors}, this.onEndResetUserPasswordDelegate, this.onResetUserPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginSetSessionManagerLoggingProfile(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetSessionManagerLoggingProfile(masterPassword, site, SessionManagerURI, logDebug, logInfo, logWarning, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndSetSessionManagerLoggingProfile(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndSetSessionManagerLoggingProfile(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginSetSessionManagerLoggingProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string SessionManagerURI = ((string)(inValues[2]));
            bool logDebug = ((bool)(inValues[3]));
            bool logInfo = ((bool)(inValues[4]));
            bool logWarning = ((bool)(inValues[5]));
            string errors = ((string)(inValues[6]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginSetSessionManagerLoggingProfile(masterPassword, site, SessionManagerURI, logDebug, logInfo, logWarning, ref errors, callback, asyncState);
        }
        
        private object[] OnEndSetSessionManagerLoggingProfile(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndSetSessionManagerLoggingProfile(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnSetSessionManagerLoggingProfileCompleted(object state) {
            if ((this.SetSessionManagerLoggingProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetSessionManagerLoggingProfileCompleted(this, new SetSessionManagerLoggingProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetSessionManagerLoggingProfileAsync(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, string errors) {
            this.SetSessionManagerLoggingProfileAsync(masterPassword, site, SessionManagerURI, logDebug, logInfo, logWarning, errors, null);
        }
        
        public void SetSessionManagerLoggingProfileAsync(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, string errors, object userState) {
            if ((this.onBeginSetSessionManagerLoggingProfileDelegate == null)) {
                this.onBeginSetSessionManagerLoggingProfileDelegate = new BeginOperationDelegate(this.OnBeginSetSessionManagerLoggingProfile);
            }
            if ((this.onEndSetSessionManagerLoggingProfileDelegate == null)) {
                this.onEndSetSessionManagerLoggingProfileDelegate = new EndOperationDelegate(this.OnEndSetSessionManagerLoggingProfile);
            }
            if ((this.onSetSessionManagerLoggingProfileCompletedDelegate == null)) {
                this.onSetSessionManagerLoggingProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetSessionManagerLoggingProfileCompleted);
            }
            base.InvokeAsync(this.onBeginSetSessionManagerLoggingProfileDelegate, new object[] {
                        masterPassword,
                        site,
                        SessionManagerURI,
                        logDebug,
                        logInfo,
                        logWarning,
                        errors}, this.onEndSetSessionManagerLoggingProfileDelegate, this.onSetSessionManagerLoggingProfileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginExportAllBlobsBegin(string masterPassword, string site, string accountName, string accountKey, ref string handle, ref string errors, ref int totalBlobs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExportAllBlobsBegin(masterPassword, site, accountName, accountKey, ref handle, ref errors, ref totalBlobs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndExportAllBlobsBegin(ref string handle, ref string errors, ref int totalBlobs, System.IAsyncResult result) {
            return base.Channel.EndExportAllBlobsBegin(ref handle, ref errors, ref totalBlobs, result);
        }
        
        private System.IAsyncResult OnBeginExportAllBlobsBegin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string accountName = ((string)(inValues[2]));
            string accountKey = ((string)(inValues[3]));
            string handle = ((string)(inValues[4]));
            string errors = ((string)(inValues[5]));
            int totalBlobs = ((int)(inValues[6]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginExportAllBlobsBegin(masterPassword, site, accountName, accountKey, ref handle, ref errors, ref totalBlobs, callback, asyncState);
        }
        
        private object[] OnEndExportAllBlobsBegin(System.IAsyncResult result) {
            string handle = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            int totalBlobs = this.GetDefaultValueForInitialization<int>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndExportAllBlobsBegin(ref handle, ref errors, ref totalBlobs, result);
            return new object[] {
                    handle,
                    errors,
                    totalBlobs,
                    retVal};
        }
        
        private void OnExportAllBlobsBeginCompleted(object state) {
            if ((this.ExportAllBlobsBeginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportAllBlobsBeginCompleted(this, new ExportAllBlobsBeginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportAllBlobsBeginAsync(string masterPassword, string site, string accountName, string accountKey, string handle, string errors, int totalBlobs) {
            this.ExportAllBlobsBeginAsync(masterPassword, site, accountName, accountKey, handle, errors, totalBlobs, null);
        }
        
        public void ExportAllBlobsBeginAsync(string masterPassword, string site, string accountName, string accountKey, string handle, string errors, int totalBlobs, object userState) {
            if ((this.onBeginExportAllBlobsBeginDelegate == null)) {
                this.onBeginExportAllBlobsBeginDelegate = new BeginOperationDelegate(this.OnBeginExportAllBlobsBegin);
            }
            if ((this.onEndExportAllBlobsBeginDelegate == null)) {
                this.onEndExportAllBlobsBeginDelegate = new EndOperationDelegate(this.OnEndExportAllBlobsBegin);
            }
            if ((this.onExportAllBlobsBeginCompletedDelegate == null)) {
                this.onExportAllBlobsBeginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportAllBlobsBeginCompleted);
            }
            base.InvokeAsync(this.onBeginExportAllBlobsBeginDelegate, new object[] {
                        masterPassword,
                        site,
                        accountName,
                        accountKey,
                        handle,
                        errors,
                        totalBlobs}, this.onEndExportAllBlobsBeginDelegate, this.onExportAllBlobsBeginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginExportAllBlobsChunk(string sessionHandle, ref string messages, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExportAllBlobsChunk(sessionHandle, ref messages, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndExportAllBlobsChunk(ref string messages, ref string errors, System.IAsyncResult result) {
            return base.Channel.EndExportAllBlobsChunk(ref messages, ref errors, result);
        }
        
        private System.IAsyncResult OnBeginExportAllBlobsChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionHandle = ((string)(inValues[0]));
            string messages = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginExportAllBlobsChunk(sessionHandle, ref messages, ref errors, callback, asyncState);
        }
        
        private object[] OnEndExportAllBlobsChunk(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndExportAllBlobsChunk(ref messages, ref errors, result);
            return new object[] {
                    messages,
                    errors,
                    retVal};
        }
        
        private void OnExportAllBlobsChunkCompleted(object state) {
            if ((this.ExportAllBlobsChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportAllBlobsChunkCompleted(this, new ExportAllBlobsChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportAllBlobsChunkAsync(string sessionHandle, string messages, string errors) {
            this.ExportAllBlobsChunkAsync(sessionHandle, messages, errors, null);
        }
        
        public void ExportAllBlobsChunkAsync(string sessionHandle, string messages, string errors, object userState) {
            if ((this.onBeginExportAllBlobsChunkDelegate == null)) {
                this.onBeginExportAllBlobsChunkDelegate = new BeginOperationDelegate(this.OnBeginExportAllBlobsChunk);
            }
            if ((this.onEndExportAllBlobsChunkDelegate == null)) {
                this.onEndExportAllBlobsChunkDelegate = new EndOperationDelegate(this.OnEndExportAllBlobsChunk);
            }
            if ((this.onExportAllBlobsChunkCompletedDelegate == null)) {
                this.onExportAllBlobsChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportAllBlobsChunkCompleted);
            }
            base.InvokeAsync(this.onBeginExportAllBlobsChunkDelegate, new object[] {
                        sessionHandle,
                        messages,
                        errors}, this.onEndExportAllBlobsChunkDelegate, this.onExportAllBlobsChunkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginExportAllBlobsCleanup(string sessionHandle, bool ok, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExportAllBlobsCleanup(sessionHandle, ok, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Expanz.ThinRIA.ESAPortal.IESAAdminService.EndExportAllBlobsCleanup(System.IAsyncResult result) {
            base.Channel.EndExportAllBlobsCleanup(result);
        }
        
        private System.IAsyncResult OnBeginExportAllBlobsCleanup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionHandle = ((string)(inValues[0]));
            bool ok = ((bool)(inValues[1]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginExportAllBlobsCleanup(sessionHandle, ok, callback, asyncState);
        }
        
        private object[] OnEndExportAllBlobsCleanup(System.IAsyncResult result) {
            ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndExportAllBlobsCleanup(result);
            return null;
        }
        
        private void OnExportAllBlobsCleanupCompleted(object state) {
            if ((this.ExportAllBlobsCleanupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportAllBlobsCleanupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportAllBlobsCleanupAsync(string sessionHandle, bool ok) {
            this.ExportAllBlobsCleanupAsync(sessionHandle, ok, null);
        }
        
        public void ExportAllBlobsCleanupAsync(string sessionHandle, bool ok, object userState) {
            if ((this.onBeginExportAllBlobsCleanupDelegate == null)) {
                this.onBeginExportAllBlobsCleanupDelegate = new BeginOperationDelegate(this.OnBeginExportAllBlobsCleanup);
            }
            if ((this.onEndExportAllBlobsCleanupDelegate == null)) {
                this.onEndExportAllBlobsCleanupDelegate = new EndOperationDelegate(this.OnEndExportAllBlobsCleanup);
            }
            if ((this.onExportAllBlobsCleanupCompletedDelegate == null)) {
                this.onExportAllBlobsCleanupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportAllBlobsCleanupCompleted);
            }
            base.InvokeAsync(this.onBeginExportAllBlobsCleanupDelegate, new object[] {
                        sessionHandle,
                        ok}, this.onEndExportAllBlobsCleanupDelegate, this.onExportAllBlobsCleanupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginSyncronisePersistentSchema(string masterPassword, string site, ref string messages, ref string errors, ref string DBML, bool apply, ref string script, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSyncronisePersistentSchema(masterPassword, site, ref messages, ref errors, ref DBML, apply, ref script, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndSyncronisePersistentSchema(ref string messages, ref string errors, ref string DBML, ref string script, System.IAsyncResult result) {
            return base.Channel.EndSyncronisePersistentSchema(ref messages, ref errors, ref DBML, ref script, result);
        }
        
        private System.IAsyncResult OnBeginSyncronisePersistentSchema(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string messages = ((string)(inValues[2]));
            string errors = ((string)(inValues[3]));
            string DBML = ((string)(inValues[4]));
            bool apply = ((bool)(inValues[5]));
            string script = ((string)(inValues[6]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginSyncronisePersistentSchema(masterPassword, site, ref messages, ref errors, ref DBML, apply, ref script, callback, asyncState);
        }
        
        private object[] OnEndSyncronisePersistentSchema(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            string DBML = this.GetDefaultValueForInitialization<string>();
            string script = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndSyncronisePersistentSchema(ref messages, ref errors, ref DBML, ref script, result);
            return new object[] {
                    messages,
                    errors,
                    DBML,
                    script,
                    retVal};
        }
        
        private void OnSyncronisePersistentSchemaCompleted(object state) {
            if ((this.SyncronisePersistentSchemaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SyncronisePersistentSchemaCompleted(this, new SyncronisePersistentSchemaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SyncronisePersistentSchemaAsync(string masterPassword, string site, string messages, string errors, string DBML, bool apply, string script) {
            this.SyncronisePersistentSchemaAsync(masterPassword, site, messages, errors, DBML, apply, script, null);
        }
        
        public void SyncronisePersistentSchemaAsync(string masterPassword, string site, string messages, string errors, string DBML, bool apply, string script, object userState) {
            if ((this.onBeginSyncronisePersistentSchemaDelegate == null)) {
                this.onBeginSyncronisePersistentSchemaDelegate = new BeginOperationDelegate(this.OnBeginSyncronisePersistentSchema);
            }
            if ((this.onEndSyncronisePersistentSchemaDelegate == null)) {
                this.onEndSyncronisePersistentSchemaDelegate = new EndOperationDelegate(this.OnEndSyncronisePersistentSchema);
            }
            if ((this.onSyncronisePersistentSchemaCompletedDelegate == null)) {
                this.onSyncronisePersistentSchemaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSyncronisePersistentSchemaCompleted);
            }
            base.InvokeAsync(this.onBeginSyncronisePersistentSchemaDelegate, new object[] {
                        masterPassword,
                        site,
                        messages,
                        errors,
                        DBML,
                        apply,
                        script}, this.onEndSyncronisePersistentSchemaDelegate, this.onSyncronisePersistentSchemaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginTerminateSession(string site, string serverURI, string sessionHandle, string password, ref string messages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTerminateSession(site, serverURI, sessionHandle, password, ref messages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndTerminateSession(ref string messages, System.IAsyncResult result) {
            return base.Channel.EndTerminateSession(ref messages, result);
        }
        
        private System.IAsyncResult OnBeginTerminateSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string site = ((string)(inValues[0]));
            string serverURI = ((string)(inValues[1]));
            string sessionHandle = ((string)(inValues[2]));
            string password = ((string)(inValues[3]));
            string messages = ((string)(inValues[4]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginTerminateSession(site, serverURI, sessionHandle, password, ref messages, callback, asyncState);
        }
        
        private object[] OnEndTerminateSession(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndTerminateSession(ref messages, result);
            return new object[] {
                    messages,
                    retVal};
        }
        
        private void OnTerminateSessionCompleted(object state) {
            if ((this.TerminateSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TerminateSessionCompleted(this, new TerminateSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TerminateSessionAsync(string site, string serverURI, string sessionHandle, string password, string messages) {
            this.TerminateSessionAsync(site, serverURI, sessionHandle, password, messages, null);
        }
        
        public void TerminateSessionAsync(string site, string serverURI, string sessionHandle, string password, string messages, object userState) {
            if ((this.onBeginTerminateSessionDelegate == null)) {
                this.onBeginTerminateSessionDelegate = new BeginOperationDelegate(this.OnBeginTerminateSession);
            }
            if ((this.onEndTerminateSessionDelegate == null)) {
                this.onEndTerminateSessionDelegate = new EndOperationDelegate(this.OnEndTerminateSession);
            }
            if ((this.onTerminateSessionCompletedDelegate == null)) {
                this.onTerminateSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTerminateSessionCompleted);
            }
            base.InvokeAsync(this.onBeginTerminateSessionDelegate, new object[] {
                        site,
                        serverURI,
                        sessionHandle,
                        password,
                        messages}, this.onEndTerminateSessionDelegate, this.onTerminateSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginSetTraceLogging(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetTraceLogging(masterPassword, traceName, site, traceType, traceLogEnabled, serverURI, sessionHandle, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndSetTraceLogging(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndSetTraceLogging(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginSetTraceLogging(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string traceName = ((string)(inValues[1]));
            string site = ((string)(inValues[2]));
            string traceType = ((string)(inValues[3]));
            bool traceLogEnabled = ((bool)(inValues[4]));
            string serverURI = ((string)(inValues[5]));
            string sessionHandle = ((string)(inValues[6]));
            string errors = ((string)(inValues[7]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginSetTraceLogging(masterPassword, traceName, site, traceType, traceLogEnabled, serverURI, sessionHandle, ref errors, callback, asyncState);
        }
        
        private object[] OnEndSetTraceLogging(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndSetTraceLogging(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnSetTraceLoggingCompleted(object state) {
            if ((this.SetTraceLoggingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetTraceLoggingCompleted(this, new SetTraceLoggingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetTraceLoggingAsync(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, string errors) {
            this.SetTraceLoggingAsync(masterPassword, traceName, site, traceType, traceLogEnabled, serverURI, sessionHandle, errors, null);
        }
        
        public void SetTraceLoggingAsync(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, string errors, object userState) {
            if ((this.onBeginSetTraceLoggingDelegate == null)) {
                this.onBeginSetTraceLoggingDelegate = new BeginOperationDelegate(this.OnBeginSetTraceLogging);
            }
            if ((this.onEndSetTraceLoggingDelegate == null)) {
                this.onEndSetTraceLoggingDelegate = new EndOperationDelegate(this.OnEndSetTraceLogging);
            }
            if ((this.onSetTraceLoggingCompletedDelegate == null)) {
                this.onSetTraceLoggingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetTraceLoggingCompleted);
            }
            base.InvokeAsync(this.onBeginSetTraceLoggingDelegate, new object[] {
                        masterPassword,
                        traceName,
                        site,
                        traceType,
                        traceLogEnabled,
                        serverURI,
                        sessionHandle,
                        errors}, this.onEndSetTraceLoggingDelegate, this.onSetTraceLoggingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginStopTraceLogging(string masterPassword, string guid, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStopTraceLogging(masterPassword, guid, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndStopTraceLogging(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndStopTraceLogging(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginStopTraceLogging(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string guid = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginStopTraceLogging(masterPassword, guid, ref errors, callback, asyncState);
        }
        
        private object[] OnEndStopTraceLogging(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndStopTraceLogging(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnStopTraceLoggingCompleted(object state) {
            if ((this.StopTraceLoggingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StopTraceLoggingCompleted(this, new StopTraceLoggingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StopTraceLoggingAsync(string masterPassword, string guid, string errors) {
            this.StopTraceLoggingAsync(masterPassword, guid, errors, null);
        }
        
        public void StopTraceLoggingAsync(string masterPassword, string guid, string errors, object userState) {
            if ((this.onBeginStopTraceLoggingDelegate == null)) {
                this.onBeginStopTraceLoggingDelegate = new BeginOperationDelegate(this.OnBeginStopTraceLogging);
            }
            if ((this.onEndStopTraceLoggingDelegate == null)) {
                this.onEndStopTraceLoggingDelegate = new EndOperationDelegate(this.OnEndStopTraceLogging);
            }
            if ((this.onStopTraceLoggingCompletedDelegate == null)) {
                this.onStopTraceLoggingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStopTraceLoggingCompleted);
            }
            base.InvokeAsync(this.onBeginStopTraceLoggingDelegate, new object[] {
                        masterPassword,
                        guid,
                        errors}, this.onEndStopTraceLoggingDelegate, this.onStopTraceLoggingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginGetTraceLogs(string masterPassword, string site, bool activeOnly, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTraceLogs(masterPassword, site, activeOnly, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAAdminService.EndGetTraceLogs(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndGetTraceLogs(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginGetTraceLogs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            bool activeOnly = ((bool)(inValues[2]));
            string errors = ((string)(inValues[3]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginGetTraceLogs(masterPassword, site, activeOnly, ref errors, callback, asyncState);
        }
        
        private object[] OnEndGetTraceLogs(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndGetTraceLogs(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnGetTraceLogsCompleted(object state) {
            if ((this.GetTraceLogsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTraceLogsCompleted(this, new GetTraceLogsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTraceLogsAsync(string masterPassword, string site, bool activeOnly, string errors) {
            this.GetTraceLogsAsync(masterPassword, site, activeOnly, errors, null);
        }
        
        public void GetTraceLogsAsync(string masterPassword, string site, bool activeOnly, string errors, object userState) {
            if ((this.onBeginGetTraceLogsDelegate == null)) {
                this.onBeginGetTraceLogsDelegate = new BeginOperationDelegate(this.OnBeginGetTraceLogs);
            }
            if ((this.onEndGetTraceLogsDelegate == null)) {
                this.onEndGetTraceLogsDelegate = new EndOperationDelegate(this.OnEndGetTraceLogs);
            }
            if ((this.onGetTraceLogsCompletedDelegate == null)) {
                this.onGetTraceLogsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTraceLogsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTraceLogsDelegate, new object[] {
                        masterPassword,
                        site,
                        activeOnly,
                        errors}, this.onEndGetTraceLogsDelegate, this.onGetTraceLogsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginGetTraceDetail(string masterPassword, string guid, bool requestOnly, ref string errors, string sessionId, ref bool hasMoreRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTraceDetail(masterPassword, guid, requestOnly, ref errors, sessionId, ref hasMoreRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAAdminService.EndGetTraceDetail(ref string errors, ref bool hasMoreRows, System.IAsyncResult result) {
            return base.Channel.EndGetTraceDetail(ref errors, ref hasMoreRows, result);
        }
        
        private System.IAsyncResult OnBeginGetTraceDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string guid = ((string)(inValues[1]));
            bool requestOnly = ((bool)(inValues[2]));
            string errors = ((string)(inValues[3]));
            string sessionId = ((string)(inValues[4]));
            bool hasMoreRows = ((bool)(inValues[5]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginGetTraceDetail(masterPassword, guid, requestOnly, ref errors, sessionId, ref hasMoreRows, callback, asyncState);
        }
        
        private object[] OnEndGetTraceDetail(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool hasMoreRows = this.GetDefaultValueForInitialization<bool>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndGetTraceDetail(ref errors, ref hasMoreRows, result);
            return new object[] {
                    errors,
                    hasMoreRows,
                    retVal};
        }
        
        private void OnGetTraceDetailCompleted(object state) {
            if ((this.GetTraceDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTraceDetailCompleted(this, new GetTraceDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTraceDetailAsync(string masterPassword, string guid, bool requestOnly, string errors, string sessionId, bool hasMoreRows) {
            this.GetTraceDetailAsync(masterPassword, guid, requestOnly, errors, sessionId, hasMoreRows, null);
        }
        
        public void GetTraceDetailAsync(string masterPassword, string guid, bool requestOnly, string errors, string sessionId, bool hasMoreRows, object userState) {
            if ((this.onBeginGetTraceDetailDelegate == null)) {
                this.onBeginGetTraceDetailDelegate = new BeginOperationDelegate(this.OnBeginGetTraceDetail);
            }
            if ((this.onEndGetTraceDetailDelegate == null)) {
                this.onEndGetTraceDetailDelegate = new EndOperationDelegate(this.OnEndGetTraceDetail);
            }
            if ((this.onGetTraceDetailCompletedDelegate == null)) {
                this.onGetTraceDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTraceDetailCompleted);
            }
            base.InvokeAsync(this.onBeginGetTraceDetailDelegate, new object[] {
                        masterPassword,
                        guid,
                        requestOnly,
                        errors,
                        sessionId,
                        hasMoreRows}, this.onEndGetTraceDetailDelegate, this.onGetTraceDetailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginEnableDiagnostics(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnableDiagnostics(masterPassword, enabled, enableForSiteManager, site, appServerUri, deleteExistingData, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Expanz.ThinRIA.ESAPortal.IESAAdminService.EndEnableDiagnostics(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndEnableDiagnostics(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginEnableDiagnostics(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            bool enabled = ((bool)(inValues[1]));
            bool enableForSiteManager = ((bool)(inValues[2]));
            string site = ((string)(inValues[3]));
            string appServerUri = ((string)(inValues[4]));
            bool deleteExistingData = ((bool)(inValues[5]));
            string errors = ((string)(inValues[6]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginEnableDiagnostics(masterPassword, enabled, enableForSiteManager, site, appServerUri, deleteExistingData, ref errors, callback, asyncState);
        }
        
        private object[] OnEndEnableDiagnostics(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndEnableDiagnostics(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnEnableDiagnosticsCompleted(object state) {
            if ((this.EnableDiagnosticsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnableDiagnosticsCompleted(this, new EnableDiagnosticsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnableDiagnosticsAsync(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, string errors) {
            this.EnableDiagnosticsAsync(masterPassword, enabled, enableForSiteManager, site, appServerUri, deleteExistingData, errors, null);
        }
        
        public void EnableDiagnosticsAsync(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, string errors, object userState) {
            if ((this.onBeginEnableDiagnosticsDelegate == null)) {
                this.onBeginEnableDiagnosticsDelegate = new BeginOperationDelegate(this.OnBeginEnableDiagnostics);
            }
            if ((this.onEndEnableDiagnosticsDelegate == null)) {
                this.onEndEnableDiagnosticsDelegate = new EndOperationDelegate(this.OnEndEnableDiagnostics);
            }
            if ((this.onEnableDiagnosticsCompletedDelegate == null)) {
                this.onEnableDiagnosticsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnableDiagnosticsCompleted);
            }
            base.InvokeAsync(this.onBeginEnableDiagnosticsDelegate, new object[] {
                        masterPassword,
                        enabled,
                        enableForSiteManager,
                        site,
                        appServerUri,
                        deleteExistingData,
                        errors}, this.onEndEnableDiagnosticsDelegate, this.onEnableDiagnosticsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Expanz.ThinRIA.ESAPortal.IESAAdminService.BeginGetLogsDetails(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLogsDetails(masterPassword, site, serviceName, from, to, prefix, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Expanz.ThinRIA.ESAPortal.IESAAdminService.EndGetLogsDetails(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndGetLogsDetails(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginGetLogsDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string serviceName = ((string)(inValues[2]));
            System.Nullable<System.DateTime> from = ((System.Nullable<System.DateTime>)(inValues[3]));
            System.Nullable<System.DateTime> to = ((System.Nullable<System.DateTime>)(inValues[4]));
            string prefix = ((string)(inValues[5]));
            string errors = ((string)(inValues[6]));
            return ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).BeginGetLogsDetails(masterPassword, site, serviceName, from, to, prefix, ref errors, callback, asyncState);
        }
        
        private object[] OnEndGetLogsDetails(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = ((Expanz.ThinRIA.ESAPortal.IESAAdminService)(this)).EndGetLogsDetails(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnGetLogsDetailsCompleted(object state) {
            if ((this.GetLogsDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLogsDetailsCompleted(this, new GetLogsDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLogsDetailsAsync(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, string errors) {
            this.GetLogsDetailsAsync(masterPassword, site, serviceName, from, to, prefix, errors, null);
        }
        
        public void GetLogsDetailsAsync(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, string errors, object userState) {
            if ((this.onBeginGetLogsDetailsDelegate == null)) {
                this.onBeginGetLogsDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetLogsDetails);
            }
            if ((this.onEndGetLogsDetailsDelegate == null)) {
                this.onEndGetLogsDetailsDelegate = new EndOperationDelegate(this.OnEndGetLogsDetails);
            }
            if ((this.onGetLogsDetailsCompletedDelegate == null)) {
                this.onGetLogsDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLogsDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetLogsDetailsDelegate, new object[] {
                        masterPassword,
                        site,
                        serviceName,
                        from,
                        to,
                        prefix,
                        errors}, this.onEndGetLogsDetailsDelegate, this.onGetLogsDetailsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Expanz.ThinRIA.ESAPortal.IESAAdminService CreateChannel() {
            return new ESAAdminServiceClientChannel(this);
        }
        
        private class ESAAdminServiceClientChannel : ChannelBase<Expanz.ThinRIA.ESAPortal.IESAAdminService>, Expanz.ThinRIA.ESAPortal.IESAAdminService {
            
            public ESAAdminServiceClientChannel(System.ServiceModel.ClientBase<Expanz.ThinRIA.ESAPortal.IESAAdminService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddSite(string masterPassword, string site, string name, string authMethod, ref string messages, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = masterPassword;
                _args[1] = site;
                _args[2] = name;
                _args[3] = authMethod;
                _args[4] = messages;
                System.IAsyncResult _result = base.BeginInvoke("AddSite", _args, callback, asyncState);
                messages = ((string)(_args[4]));
                return _result;
            }
            
            public bool EndAddSite(ref string messages, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = messages;
                bool _result = ((bool)(base.EndInvoke("AddSite", _args, result)));
                messages = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginBroadcastMessage(string masterPassword, string site, string message, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = masterPassword;
                _args[1] = site;
                _args[2] = message;
                _args[3] = errors;
                System.IAsyncResult _result = base.BeginInvoke("BroadcastMessage", _args, callback, asyncState);
                errors = ((string)(_args[3]));
                return _result;
            }
            
            public string EndBroadcastMessage(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                string _result = ((string)(base.EndInvoke("BroadcastMessage", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = user;
                _args[1] = oldPassword;
                _args[2] = newPassword;
                _args[3] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ChangeUserPassword", _args, callback, asyncState);
                errors = ((string)(_args[3]));
                return _result;
            }
            
            public bool EndChangeUserPassword(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("ChangeUserPassword", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateAdminSession(string user, string password, ref string errorMessage, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = user;
                _args[1] = password;
                _args[2] = errorMessage;
                System.IAsyncResult _result = base.BeginInvoke("CreateAdminSession", _args, callback, asyncState);
                errorMessage = ((string)(_args[2]));
                return _result;
            }
            
            public string EndCreateAdminSession(ref string errorMessage, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errorMessage;
                string _result = ((string)(base.EndInvoke("CreateAdminSession", _args, result)));
                errorMessage = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateUser(string masterPassword, string user, string description, string userPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = masterPassword;
                _args[1] = user;
                _args[2] = description;
                _args[3] = userPassword;
                _args[4] = errors;
                System.IAsyncResult _result = base.BeginInvoke("CreateUser", _args, callback, asyncState);
                errors = ((string)(_args[4]));
                return _result;
            }
            
            public bool EndCreateUser(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("CreateUser", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUser(string masterPassword, string user, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = masterPassword;
                _args[1] = user;
                _args[2] = errors;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUser", _args, callback, asyncState);
                errors = ((string)(_args[2]));
                return _result;
            }
            
            public bool EndDeleteUser(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("DeleteUser", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginDisableSessionManager(string masterPassword, string site, string SessionManagerURI, bool disable, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = masterPassword;
                _args[1] = site;
                _args[2] = SessionManagerURI;
                _args[3] = disable;
                _args[4] = errors;
                System.IAsyncResult _result = base.BeginInvoke("DisableSessionManager", _args, callback, asyncState);
                errors = ((string)(_args[4]));
                return _result;
            }
            
            public bool EndDisableSessionManager(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("DisableSessionManager", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginListSessionManagersForSite(string masterPassword, string site, ref string messages, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = masterPassword;
                _args[1] = site;
                _args[2] = messages;
                System.IAsyncResult _result = base.BeginInvoke("ListSessionManagersForSite", _args, callback, asyncState);
                messages = ((string)(_args[2]));
                return _result;
            }
            
            public string EndListSessionManagersForSite(ref string messages, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = messages;
                string _result = ((string)(base.EndInvoke("ListSessionManagersForSite", _args, result)));
                messages = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginListSessionsForServer(string serverURI, string password, ref string messages, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = serverURI;
                _args[1] = password;
                _args[2] = messages;
                System.IAsyncResult _result = base.BeginInvoke("ListSessionsForServer", _args, callback, asyncState);
                messages = ((string)(_args[2]));
                return _result;
            }
            
            public string EndListSessionsForServer(ref string messages, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = messages;
                string _result = ((string)(base.EndInvoke("ListSessionsForServer", _args, result)));
                messages = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginListUsers(string masterPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = masterPassword;
                _args[1] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ListUsers", _args, callback, asyncState);
                errors = ((string)(_args[1]));
                return _result;
            }
            
            public string EndListUsers(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                string _result = ((string)(base.EndInvoke("ListUsers", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginResetUserPassword(string masterPassword, string user, string password, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = masterPassword;
                _args[1] = user;
                _args[2] = password;
                _args[3] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ResetUserPassword", _args, callback, asyncState);
                errors = ((string)(_args[3]));
                return _result;
            }
            
            public bool EndResetUserPassword(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("ResetUserPassword", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginSetSessionManagerLoggingProfile(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = masterPassword;
                _args[1] = site;
                _args[2] = SessionManagerURI;
                _args[3] = logDebug;
                _args[4] = logInfo;
                _args[5] = logWarning;
                _args[6] = errors;
                System.IAsyncResult _result = base.BeginInvoke("SetSessionManagerLoggingProfile", _args, callback, asyncState);
                errors = ((string)(_args[6]));
                return _result;
            }
            
            public bool EndSetSessionManagerLoggingProfile(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("SetSessionManagerLoggingProfile", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginExportAllBlobsBegin(string masterPassword, string site, string accountName, string accountKey, ref string handle, ref string errors, ref int totalBlobs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = masterPassword;
                _args[1] = site;
                _args[2] = accountName;
                _args[3] = accountKey;
                _args[4] = handle;
                _args[5] = errors;
                _args[6] = totalBlobs;
                System.IAsyncResult _result = base.BeginInvoke("ExportAllBlobsBegin", _args, callback, asyncState);
                handle = ((string)(_args[4]));
                errors = ((string)(_args[5]));
                totalBlobs = ((int)(_args[6]));
                return _result;
            }
            
            public bool EndExportAllBlobsBegin(ref string handle, ref string errors, ref int totalBlobs, System.IAsyncResult result) {
                object[] _args = new object[3];
                _args[0] = handle;
                _args[1] = errors;
                _args[2] = totalBlobs;
                bool _result = ((bool)(base.EndInvoke("ExportAllBlobsBegin", _args, result)));
                handle = ((string)(_args[0]));
                errors = ((string)(_args[1]));
                totalBlobs = ((int)(_args[2]));
                return _result;
            }
            
            public System.IAsyncResult BeginExportAllBlobsChunk(string sessionHandle, ref string messages, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = sessionHandle;
                _args[1] = messages;
                _args[2] = errors;
                System.IAsyncResult _result = base.BeginInvoke("ExportAllBlobsChunk", _args, callback, asyncState);
                messages = ((string)(_args[1]));
                errors = ((string)(_args[2]));
                return _result;
            }
            
            public bool EndExportAllBlobsChunk(ref string messages, ref string errors, System.IAsyncResult result) {
                object[] _args = new object[2];
                _args[0] = messages;
                _args[1] = errors;
                bool _result = ((bool)(base.EndInvoke("ExportAllBlobsChunk", _args, result)));
                messages = ((string)(_args[0]));
                errors = ((string)(_args[1]));
                return _result;
            }
            
            public System.IAsyncResult BeginExportAllBlobsCleanup(string sessionHandle, bool ok, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sessionHandle;
                _args[1] = ok;
                System.IAsyncResult _result = base.BeginInvoke("ExportAllBlobsCleanup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndExportAllBlobsCleanup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ExportAllBlobsCleanup", _args, result);
            }
            
            public System.IAsyncResult BeginSyncronisePersistentSchema(string masterPassword, string site, ref string messages, ref string errors, ref string DBML, bool apply, ref string script, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = masterPassword;
                _args[1] = site;
                _args[2] = messages;
                _args[3] = errors;
                _args[4] = DBML;
                _args[5] = apply;
                _args[6] = script;
                System.IAsyncResult _result = base.BeginInvoke("SyncronisePersistentSchema", _args, callback, asyncState);
                messages = ((string)(_args[2]));
                errors = ((string)(_args[3]));
                DBML = ((string)(_args[4]));
                script = ((string)(_args[6]));
                return _result;
            }
            
            public bool EndSyncronisePersistentSchema(ref string messages, ref string errors, ref string DBML, ref string script, System.IAsyncResult result) {
                object[] _args = new object[4];
                _args[0] = messages;
                _args[1] = errors;
                _args[2] = DBML;
                _args[3] = script;
                bool _result = ((bool)(base.EndInvoke("SyncronisePersistentSchema", _args, result)));
                messages = ((string)(_args[0]));
                errors = ((string)(_args[1]));
                DBML = ((string)(_args[2]));
                script = ((string)(_args[3]));
                return _result;
            }
            
            public System.IAsyncResult BeginTerminateSession(string site, string serverURI, string sessionHandle, string password, ref string messages, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = site;
                _args[1] = serverURI;
                _args[2] = sessionHandle;
                _args[3] = password;
                _args[4] = messages;
                System.IAsyncResult _result = base.BeginInvoke("TerminateSession", _args, callback, asyncState);
                messages = ((string)(_args[4]));
                return _result;
            }
            
            public bool EndTerminateSession(ref string messages, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = messages;
                bool _result = ((bool)(base.EndInvoke("TerminateSession", _args, result)));
                messages = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginSetTraceLogging(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = masterPassword;
                _args[1] = traceName;
                _args[2] = site;
                _args[3] = traceType;
                _args[4] = traceLogEnabled;
                _args[5] = serverURI;
                _args[6] = sessionHandle;
                _args[7] = errors;
                System.IAsyncResult _result = base.BeginInvoke("SetTraceLogging", _args, callback, asyncState);
                errors = ((string)(_args[7]));
                return _result;
            }
            
            public bool EndSetTraceLogging(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("SetTraceLogging", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginStopTraceLogging(string masterPassword, string guid, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = masterPassword;
                _args[1] = guid;
                _args[2] = errors;
                System.IAsyncResult _result = base.BeginInvoke("StopTraceLogging", _args, callback, asyncState);
                errors = ((string)(_args[2]));
                return _result;
            }
            
            public bool EndStopTraceLogging(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("StopTraceLogging", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTraceLogs(string masterPassword, string site, bool activeOnly, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = masterPassword;
                _args[1] = site;
                _args[2] = activeOnly;
                _args[3] = errors;
                System.IAsyncResult _result = base.BeginInvoke("GetTraceLogs", _args, callback, asyncState);
                errors = ((string)(_args[3]));
                return _result;
            }
            
            public string EndGetTraceLogs(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                string _result = ((string)(base.EndInvoke("GetTraceLogs", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTraceDetail(string masterPassword, string guid, bool requestOnly, ref string errors, string sessionId, ref bool hasMoreRows, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = masterPassword;
                _args[1] = guid;
                _args[2] = requestOnly;
                _args[3] = errors;
                _args[4] = sessionId;
                _args[5] = hasMoreRows;
                System.IAsyncResult _result = base.BeginInvoke("GetTraceDetail", _args, callback, asyncState);
                errors = ((string)(_args[3]));
                hasMoreRows = ((bool)(_args[5]));
                return _result;
            }
            
            public string EndGetTraceDetail(ref string errors, ref bool hasMoreRows, System.IAsyncResult result) {
                object[] _args = new object[2];
                _args[0] = errors;
                _args[1] = hasMoreRows;
                string _result = ((string)(base.EndInvoke("GetTraceDetail", _args, result)));
                errors = ((string)(_args[0]));
                hasMoreRows = ((bool)(_args[1]));
                return _result;
            }
            
            public System.IAsyncResult BeginEnableDiagnostics(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = masterPassword;
                _args[1] = enabled;
                _args[2] = enableForSiteManager;
                _args[3] = site;
                _args[4] = appServerUri;
                _args[5] = deleteExistingData;
                _args[6] = errors;
                System.IAsyncResult _result = base.BeginInvoke("EnableDiagnostics", _args, callback, asyncState);
                errors = ((string)(_args[6]));
                return _result;
            }
            
            public bool EndEnableDiagnostics(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                bool _result = ((bool)(base.EndInvoke("EnableDiagnostics", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLogsDetails(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, ref string errors, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = masterPassword;
                _args[1] = site;
                _args[2] = serviceName;
                _args[3] = from;
                _args[4] = to;
                _args[5] = prefix;
                _args[6] = errors;
                System.IAsyncResult _result = base.BeginInvoke("GetLogsDetails", _args, callback, asyncState);
                errors = ((string)(_args[6]));
                return _result;
            }
            
            public string EndGetLogsDetails(ref string errors, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = errors;
                string _result = ((string)(base.EndInvoke("GetLogsDetails", _args, result)));
                errors = ((string)(_args[0]));
                return _result;
            }
        }
    }
}
