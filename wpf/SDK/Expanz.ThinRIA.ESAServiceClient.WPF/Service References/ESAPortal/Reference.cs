//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Expanz.ThinRIA.ESAPortal {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.expanz.com/ESAService", ConfigurationName="ESAPortal.IESAService")]
    public interface IESAService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/CreateSessionX", ReplyAction="http://www.expanz.com/ESAService/IESAService/CreateSessionXResponse")]
        string CreateSessionX(System.Xml.Linq.XElement xml, ref string errorMessage);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/CreateSessionX", ReplyAction="http://www.expanz.com/ESAService/IESAService/CreateSessionXResponse")]
        System.IAsyncResult BeginCreateSessionX(System.Xml.Linq.XElement xml, ref string errorMessage, System.AsyncCallback callback, object asyncState);
        
        string EndCreateSessionX(ref string errorMessage, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/ExecX", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecXResponse")]
        System.Xml.Linq.XElement ExecX(System.Xml.Linq.XElement xml, ref string sessionHandle, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ExecX", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecXResponse")]
        System.IAsyncResult BeginExecX(System.Xml.Linq.XElement xml, ref string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndExecX(ref string sessionHandle, ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/ExecAnonymousX", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecAnonymousXResponse")]
        System.Xml.Linq.XElement ExecAnonymousX(string site, System.Xml.Linq.XElement xml, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ExecAnonymousX", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecAnonymousXResponse")]
        System.IAsyncResult BeginExecAnonymousX(string site, System.Xml.Linq.XElement xml, ref string errors, System.AsyncCallback callback, object asyncState);
        
        System.Xml.Linq.XElement EndExecAnonymousX(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/ChangeUserPassword", ReplyAction="http://www.expanz.com/ESAService/IESAService/ChangeUserPasswordResponse")]
        bool ChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ChangeUserPassword", ReplyAction="http://www.expanz.com/ESAService/IESAService/ChangeUserPasswordResponse")]
        System.IAsyncResult BeginChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndChangeUserPassword(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/CreateSession", ReplyAction="http://www.expanz.com/ESAService/IESAService/CreateSessionResponse")]
        string CreateSession(string inXml, ref string errorMessage);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/CreateSession", ReplyAction="http://www.expanz.com/ESAService/IESAService/CreateSessionResponse")]
        System.IAsyncResult BeginCreateSession(string inXml, ref string errorMessage, System.AsyncCallback callback, object asyncState);
        
        string EndCreateSession(ref string errorMessage, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/Exec", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecResponse")]
        string Exec(string inXML, ref string sessionHandle, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/Exec", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecResponse")]
        System.IAsyncResult BeginExec(string inXML, ref string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndExec(ref string sessionHandle, ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/ExecTimed", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecTimedResponse")]
        string ExecTimed(string inXML, ref string sessionHandle, ref string errors, ref long responseTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ExecTimed", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecTimedResponse")]
        System.IAsyncResult BeginExecTimed(string inXML, ref string sessionHandle, ref string errors, ref long responseTime, System.AsyncCallback callback, object asyncState);
        
        string EndExecTimed(ref string sessionHandle, ref string errors, ref long responseTime, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/ExecLogged", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecLoggedResponse")]
        string ExecLogged(string inXML, ref string sessionHandle, bool logRequests, bool logResponses, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ExecLogged", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecLoggedResponse")]
        System.IAsyncResult BeginExecLogged(string inXML, ref string sessionHandle, bool logRequests, bool logResponses, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndExecLogged(ref string sessionHandle, ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/ExecAnonymous", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecAnonymousResponse")]
        string ExecAnonymous(string site, string inXml, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ExecAnonymous", ReplyAction="http://www.expanz.com/ESAService/IESAService/ExecAnonymousResponse")]
        System.IAsyncResult BeginExecAnonymous(string site, string inXml, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndExecAnonymous(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/ListAvailableSites", ReplyAction="http://www.expanz.com/ESAService/IESAService/ListAvailableSitesResponse")]
        string ListAvailableSites(ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ListAvailableSites", ReplyAction="http://www.expanz.com/ESAService/IESAService/ListAvailableSitesResponse")]
        System.IAsyncResult BeginListAvailableSites(ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndListAvailableSites(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/Ping", ReplyAction="http://www.expanz.com/ESAService/IESAService/PingResponse")]
        bool Ping(string sessionHandle);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/Ping", ReplyAction="http://www.expanz.com/ESAService/IESAService/PingResponse")]
        System.IAsyncResult BeginPing(string sessionHandle, System.AsyncCallback callback, object asyncState);
        
        bool EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/PingWithLoad", ReplyAction="http://www.expanz.com/ESAService/IESAService/PingWithLoadResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        int PingWithLoad(object payload);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/PingWithLoad", ReplyAction="http://www.expanz.com/ESAService/IESAService/PingWithLoadResponse")]
        System.IAsyncResult BeginPingWithLoad(object payload, System.AsyncCallback callback, object asyncState);
        
        int EndPingWithLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/ProcessEDI", ReplyAction="http://www.expanz.com/ESAService/IESAService/ProcessEDIResponse")]
        string ProcessEDI(string EDIAccessKey, string site, string inXml, string xsdURL, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ProcessEDI", ReplyAction="http://www.expanz.com/ESAService/IESAService/ProcessEDIResponse")]
        System.IAsyncResult BeginProcessEDI(string EDIAccessKey, string site, string inXml, string xsdURL, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndProcessEDI(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/ReleaseSession", ReplyAction="http://www.expanz.com/ESAService/IESAService/ReleaseSessionResponse")]
        bool ReleaseSession(string sessionHandle, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ReleaseSession", ReplyAction="http://www.expanz.com/ESAService/IESAService/ReleaseSessionResponse")]
        System.IAsyncResult BeginReleaseSession(string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndReleaseSession(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/Test", ReplyAction="http://www.expanz.com/ESAService/IESAService/TestResponse")]
        string Test(string val);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/Test", ReplyAction="http://www.expanz.com/ESAService/IESAService/TestResponse")]
        System.IAsyncResult BeginTest(string val, System.AsyncCallback callback, object asyncState);
        
        string EndTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/TrickleContent", ReplyAction="http://www.expanz.com/ESAService/IESAService/TrickleContentResponse")]
        int TrickleContent(string key, byte[] bytes, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/TrickleContent", ReplyAction="http://www.expanz.com/ESAService/IESAService/TrickleContentResponse")]
        System.IAsyncResult BeginTrickleContent(string key, byte[] bytes, ref string errors, System.AsyncCallback callback, object asyncState);
        
        int EndTrickleContent(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/WebServerPing", ReplyAction="http://www.expanz.com/ESAService/IESAService/WebServerPingResponse")]
        bool WebServerPing();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/WebServerPing", ReplyAction="http://www.expanz.com/ESAService/IESAService/WebServerPingResponse")]
        System.IAsyncResult BeginWebServerPing(System.AsyncCallback callback, object asyncState);
        
        bool EndWebServerPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/SiteManagerPing", ReplyAction="http://www.expanz.com/ESAService/IESAService/SiteManagerPingResponse")]
        bool SiteManagerPing();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/SiteManagerPing", ReplyAction="http://www.expanz.com/ESAService/IESAService/SiteManagerPingResponse")]
        System.IAsyncResult BeginSiteManagerPing(System.AsyncCallback callback, object asyncState);
        
        bool EndSiteManagerPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/GetSchemaForActivity", ReplyAction="http://www.expanz.com/ESAService/IESAService/GetSchemaForActivityResponse")]
        string GetSchemaForActivity(string site, string activity, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/GetSchemaForActivity", ReplyAction="http://www.expanz.com/ESAService/IESAService/GetSchemaForActivityResponse")]
        System.IAsyncResult BeginGetSchemaForActivity(string site, string activity, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndGetSchemaForActivity(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/ListActivitiesForSite", ReplyAction="http://www.expanz.com/ESAService/IESAService/ListActivitiesForSiteResponse")]
        string ListActivitiesForSite(string site, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/ListActivitiesForSite", ReplyAction="http://www.expanz.com/ESAService/IESAService/ListActivitiesForSiteResponse")]
        System.IAsyncResult BeginListActivitiesForSite(string site, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndListActivitiesForSite(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/GetBlob", ReplyAction="http://www.expanz.com/ESAService/IESAService/GetBlobResponse")]
        System.IO.Stream GetBlob(string sessionHandle, string activityHandle, string blobId, bool isbyteArray);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/GetBlob", ReplyAction="http://www.expanz.com/ESAService/IESAService/GetBlobResponse")]
        System.IAsyncResult BeginGetBlob(string sessionHandle, string activityHandle, string blobId, bool isbyteArray, System.AsyncCallback callback, object asyncState);
        
        System.IO.Stream EndGetBlob(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAService/IESAService/GetFile", ReplyAction="http://www.expanz.com/ESAService/IESAService/GetFileResponse")]
        System.IO.Stream GetFile(string sessionHandle, string fileName, bool isbyteArray);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAService/IESAService/GetFile", ReplyAction="http://www.expanz.com/ESAService/IESAService/GetFileResponse")]
        System.IAsyncResult BeginGetFile(string sessionHandle, string fileName, bool isbyteArray, System.AsyncCallback callback, object asyncState);
        
        System.IO.Stream EndGetFile(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IESAServiceChannel : Expanz.ThinRIA.ESAPortal.IESAService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateSessionXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateSessionXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errorMessage {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string sessionHandle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecAnonymousXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecAnonymousXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public System.Xml.Linq.XElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Xml.Linq.XElement)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errorMessage {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string sessionHandle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecTimedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecTimedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string sessionHandle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public long responseTime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[2]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecLoggedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecLoggedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string sessionHandle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecAnonymousCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecAnonymousCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListAvailableSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListAvailableSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingWithLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingWithLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcessEDICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProcessEDICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReleaseSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReleaseSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrickleContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TrickleContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServerPingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public WebServerPingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SiteManagerPingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SiteManagerPingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSchemaForActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSchemaForActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListActivitiesForSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListActivitiesForSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBlobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBlobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.Stream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.IO.Stream Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ESAServiceClient : System.ServiceModel.ClientBase<Expanz.ThinRIA.ESAPortal.IESAService>, Expanz.ThinRIA.ESAPortal.IESAService {
        
        private BeginOperationDelegate onBeginCreateSessionXDelegate;
        
        private EndOperationDelegate onEndCreateSessionXDelegate;
        
        private System.Threading.SendOrPostCallback onCreateSessionXCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecXDelegate;
        
        private EndOperationDelegate onEndExecXDelegate;
        
        private System.Threading.SendOrPostCallback onExecXCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecAnonymousXDelegate;
        
        private EndOperationDelegate onEndExecAnonymousXDelegate;
        
        private System.Threading.SendOrPostCallback onExecAnonymousXCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeUserPasswordDelegate;
        
        private EndOperationDelegate onEndChangeUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onChangeUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateSessionDelegate;
        
        private EndOperationDelegate onEndCreateSessionDelegate;
        
        private System.Threading.SendOrPostCallback onCreateSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecDelegate;
        
        private EndOperationDelegate onEndExecDelegate;
        
        private System.Threading.SendOrPostCallback onExecCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecTimedDelegate;
        
        private EndOperationDelegate onEndExecTimedDelegate;
        
        private System.Threading.SendOrPostCallback onExecTimedCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecLoggedDelegate;
        
        private EndOperationDelegate onEndExecLoggedDelegate;
        
        private System.Threading.SendOrPostCallback onExecLoggedCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecAnonymousDelegate;
        
        private EndOperationDelegate onEndExecAnonymousDelegate;
        
        private System.Threading.SendOrPostCallback onExecAnonymousCompletedDelegate;
        
        private BeginOperationDelegate onBeginListAvailableSitesDelegate;
        
        private EndOperationDelegate onEndListAvailableSitesDelegate;
        
        private System.Threading.SendOrPostCallback onListAvailableSitesCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingWithLoadDelegate;
        
        private EndOperationDelegate onEndPingWithLoadDelegate;
        
        private System.Threading.SendOrPostCallback onPingWithLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginProcessEDIDelegate;
        
        private EndOperationDelegate onEndProcessEDIDelegate;
        
        private System.Threading.SendOrPostCallback onProcessEDICompletedDelegate;
        
        private BeginOperationDelegate onBeginReleaseSessionDelegate;
        
        private EndOperationDelegate onEndReleaseSessionDelegate;
        
        private System.Threading.SendOrPostCallback onReleaseSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestDelegate;
        
        private EndOperationDelegate onEndTestDelegate;
        
        private System.Threading.SendOrPostCallback onTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginTrickleContentDelegate;
        
        private EndOperationDelegate onEndTrickleContentDelegate;
        
        private System.Threading.SendOrPostCallback onTrickleContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginWebServerPingDelegate;
        
        private EndOperationDelegate onEndWebServerPingDelegate;
        
        private System.Threading.SendOrPostCallback onWebServerPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginSiteManagerPingDelegate;
        
        private EndOperationDelegate onEndSiteManagerPingDelegate;
        
        private System.Threading.SendOrPostCallback onSiteManagerPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSchemaForActivityDelegate;
        
        private EndOperationDelegate onEndGetSchemaForActivityDelegate;
        
        private System.Threading.SendOrPostCallback onGetSchemaForActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginListActivitiesForSiteDelegate;
        
        private EndOperationDelegate onEndListActivitiesForSiteDelegate;
        
        private System.Threading.SendOrPostCallback onListActivitiesForSiteCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBlobDelegate;
        
        private EndOperationDelegate onEndGetBlobDelegate;
        
        private System.Threading.SendOrPostCallback onGetBlobCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileDelegate;
        
        private EndOperationDelegate onEndGetFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileCompletedDelegate;
        
        public ESAServiceClient() {
        }
        
        public ESAServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ESAServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ESAServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ESAServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CreateSessionXCompletedEventArgs> CreateSessionXCompleted;
        
        public event System.EventHandler<ExecXCompletedEventArgs> ExecXCompleted;
        
        public event System.EventHandler<ExecAnonymousXCompletedEventArgs> ExecAnonymousXCompleted;
        
        public event System.EventHandler<ChangeUserPasswordCompletedEventArgs> ChangeUserPasswordCompleted;
        
        public event System.EventHandler<CreateSessionCompletedEventArgs> CreateSessionCompleted;
        
        public event System.EventHandler<ExecCompletedEventArgs> ExecCompleted;
        
        public event System.EventHandler<ExecTimedCompletedEventArgs> ExecTimedCompleted;
        
        public event System.EventHandler<ExecLoggedCompletedEventArgs> ExecLoggedCompleted;
        
        public event System.EventHandler<ExecAnonymousCompletedEventArgs> ExecAnonymousCompleted;
        
        public event System.EventHandler<ListAvailableSitesCompletedEventArgs> ListAvailableSitesCompleted;
        
        public event System.EventHandler<PingCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<PingWithLoadCompletedEventArgs> PingWithLoadCompleted;
        
        public event System.EventHandler<ProcessEDICompletedEventArgs> ProcessEDICompleted;
        
        public event System.EventHandler<ReleaseSessionCompletedEventArgs> ReleaseSessionCompleted;
        
        public event System.EventHandler<TestCompletedEventArgs> TestCompleted;
        
        public event System.EventHandler<TrickleContentCompletedEventArgs> TrickleContentCompleted;
        
        public event System.EventHandler<WebServerPingCompletedEventArgs> WebServerPingCompleted;
        
        public event System.EventHandler<SiteManagerPingCompletedEventArgs> SiteManagerPingCompleted;
        
        public event System.EventHandler<GetSchemaForActivityCompletedEventArgs> GetSchemaForActivityCompleted;
        
        public event System.EventHandler<ListActivitiesForSiteCompletedEventArgs> ListActivitiesForSiteCompleted;
        
        public event System.EventHandler<GetBlobCompletedEventArgs> GetBlobCompleted;
        
        public event System.EventHandler<GetFileCompletedEventArgs> GetFileCompleted;
        
        public string CreateSessionX(System.Xml.Linq.XElement xml, ref string errorMessage) {
            return base.Channel.CreateSessionX(xml, ref errorMessage);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateSessionX(System.Xml.Linq.XElement xml, ref string errorMessage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateSessionX(xml, ref errorMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndCreateSessionX(ref string errorMessage, System.IAsyncResult result) {
            return base.Channel.EndCreateSessionX(ref errorMessage, result);
        }
        
        private System.IAsyncResult OnBeginCreateSessionX(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Xml.Linq.XElement xml = ((System.Xml.Linq.XElement)(inValues[0]));
            string errorMessage = ((string)(inValues[1]));
            return this.BeginCreateSessionX(xml, ref errorMessage, callback, asyncState);
        }
        
        private object[] OnEndCreateSessionX(System.IAsyncResult result) {
            string errorMessage = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndCreateSessionX(ref errorMessage, result);
            return new object[] {
                    errorMessage,
                    retVal};
        }
        
        private void OnCreateSessionXCompleted(object state) {
            if ((this.CreateSessionXCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateSessionXCompleted(this, new CreateSessionXCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateSessionXAsync(System.Xml.Linq.XElement xml, string errorMessage) {
            this.CreateSessionXAsync(xml, errorMessage, null);
        }
        
        public void CreateSessionXAsync(System.Xml.Linq.XElement xml, string errorMessage, object userState) {
            if ((this.onBeginCreateSessionXDelegate == null)) {
                this.onBeginCreateSessionXDelegate = new BeginOperationDelegate(this.OnBeginCreateSessionX);
            }
            if ((this.onEndCreateSessionXDelegate == null)) {
                this.onEndCreateSessionXDelegate = new EndOperationDelegate(this.OnEndCreateSessionX);
            }
            if ((this.onCreateSessionXCompletedDelegate == null)) {
                this.onCreateSessionXCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateSessionXCompleted);
            }
            base.InvokeAsync(this.onBeginCreateSessionXDelegate, new object[] {
                        xml,
                        errorMessage}, this.onEndCreateSessionXDelegate, this.onCreateSessionXCompletedDelegate, userState);
        }
        
        public System.Xml.Linq.XElement ExecX(System.Xml.Linq.XElement xml, ref string sessionHandle, ref string errors) {
            return base.Channel.ExecX(xml, ref sessionHandle, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecX(System.Xml.Linq.XElement xml, ref string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecX(xml, ref sessionHandle, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Xml.Linq.XElement EndExecX(ref string sessionHandle, ref string errors, System.IAsyncResult result) {
            return base.Channel.EndExecX(ref sessionHandle, ref errors, result);
        }
        
        private System.IAsyncResult OnBeginExecX(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Xml.Linq.XElement xml = ((System.Xml.Linq.XElement)(inValues[0]));
            string sessionHandle = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return this.BeginExecX(xml, ref sessionHandle, ref errors, callback, asyncState);
        }
        
        private object[] OnEndExecX(System.IAsyncResult result) {
            string sessionHandle = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            System.Xml.Linq.XElement retVal = this.EndExecX(ref sessionHandle, ref errors, result);
            return new object[] {
                    sessionHandle,
                    errors,
                    retVal};
        }
        
        private void OnExecXCompleted(object state) {
            if ((this.ExecXCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecXCompleted(this, new ExecXCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecXAsync(System.Xml.Linq.XElement xml, string sessionHandle, string errors) {
            this.ExecXAsync(xml, sessionHandle, errors, null);
        }
        
        public void ExecXAsync(System.Xml.Linq.XElement xml, string sessionHandle, string errors, object userState) {
            if ((this.onBeginExecXDelegate == null)) {
                this.onBeginExecXDelegate = new BeginOperationDelegate(this.OnBeginExecX);
            }
            if ((this.onEndExecXDelegate == null)) {
                this.onEndExecXDelegate = new EndOperationDelegate(this.OnEndExecX);
            }
            if ((this.onExecXCompletedDelegate == null)) {
                this.onExecXCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecXCompleted);
            }
            base.InvokeAsync(this.onBeginExecXDelegate, new object[] {
                        xml,
                        sessionHandle,
                        errors}, this.onEndExecXDelegate, this.onExecXCompletedDelegate, userState);
        }
        
        public System.Xml.Linq.XElement ExecAnonymousX(string site, System.Xml.Linq.XElement xml, ref string errors) {
            return base.Channel.ExecAnonymousX(site, xml, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecAnonymousX(string site, System.Xml.Linq.XElement xml, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecAnonymousX(site, xml, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Xml.Linq.XElement EndExecAnonymousX(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndExecAnonymousX(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginExecAnonymousX(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string site = ((string)(inValues[0]));
            System.Xml.Linq.XElement xml = ((System.Xml.Linq.XElement)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return this.BeginExecAnonymousX(site, xml, ref errors, callback, asyncState);
        }
        
        private object[] OnEndExecAnonymousX(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            System.Xml.Linq.XElement retVal = this.EndExecAnonymousX(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnExecAnonymousXCompleted(object state) {
            if ((this.ExecAnonymousXCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecAnonymousXCompleted(this, new ExecAnonymousXCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecAnonymousXAsync(string site, System.Xml.Linq.XElement xml, string errors) {
            this.ExecAnonymousXAsync(site, xml, errors, null);
        }
        
        public void ExecAnonymousXAsync(string site, System.Xml.Linq.XElement xml, string errors, object userState) {
            if ((this.onBeginExecAnonymousXDelegate == null)) {
                this.onBeginExecAnonymousXDelegate = new BeginOperationDelegate(this.OnBeginExecAnonymousX);
            }
            if ((this.onEndExecAnonymousXDelegate == null)) {
                this.onEndExecAnonymousXDelegate = new EndOperationDelegate(this.OnEndExecAnonymousX);
            }
            if ((this.onExecAnonymousXCompletedDelegate == null)) {
                this.onExecAnonymousXCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecAnonymousXCompleted);
            }
            base.InvokeAsync(this.onBeginExecAnonymousXDelegate, new object[] {
                        site,
                        xml,
                        errors}, this.onEndExecAnonymousXDelegate, this.onExecAnonymousXCompletedDelegate, userState);
        }
        
        public bool ChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors) {
            return base.Channel.ChangeUserPassword(user, oldPassword, newPassword, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeUserPassword(user, oldPassword, newPassword, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndChangeUserPassword(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndChangeUserPassword(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginChangeUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string oldPassword = ((string)(inValues[1]));
            string newPassword = ((string)(inValues[2]));
            string errors = ((string)(inValues[3]));
            return this.BeginChangeUserPassword(user, oldPassword, newPassword, ref errors, callback, asyncState);
        }
        
        private object[] OnEndChangeUserPassword(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndChangeUserPassword(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnChangeUserPasswordCompleted(object state) {
            if ((this.ChangeUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeUserPasswordCompleted(this, new ChangeUserPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeUserPasswordAsync(string user, string oldPassword, string newPassword, string errors) {
            this.ChangeUserPasswordAsync(user, oldPassword, newPassword, errors, null);
        }
        
        public void ChangeUserPasswordAsync(string user, string oldPassword, string newPassword, string errors, object userState) {
            if ((this.onBeginChangeUserPasswordDelegate == null)) {
                this.onBeginChangeUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginChangeUserPassword);
            }
            if ((this.onEndChangeUserPasswordDelegate == null)) {
                this.onEndChangeUserPasswordDelegate = new EndOperationDelegate(this.OnEndChangeUserPassword);
            }
            if ((this.onChangeUserPasswordCompletedDelegate == null)) {
                this.onChangeUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginChangeUserPasswordDelegate, new object[] {
                        user,
                        oldPassword,
                        newPassword,
                        errors}, this.onEndChangeUserPasswordDelegate, this.onChangeUserPasswordCompletedDelegate, userState);
        }
        
        public string CreateSession(string inXml, ref string errorMessage) {
            return base.Channel.CreateSession(inXml, ref errorMessage);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateSession(string inXml, ref string errorMessage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateSession(inXml, ref errorMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndCreateSession(ref string errorMessage, System.IAsyncResult result) {
            return base.Channel.EndCreateSession(ref errorMessage, result);
        }
        
        private System.IAsyncResult OnBeginCreateSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inXml = ((string)(inValues[0]));
            string errorMessage = ((string)(inValues[1]));
            return this.BeginCreateSession(inXml, ref errorMessage, callback, asyncState);
        }
        
        private object[] OnEndCreateSession(System.IAsyncResult result) {
            string errorMessage = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndCreateSession(ref errorMessage, result);
            return new object[] {
                    errorMessage,
                    retVal};
        }
        
        private void OnCreateSessionCompleted(object state) {
            if ((this.CreateSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateSessionCompleted(this, new CreateSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateSessionAsync(string inXml, string errorMessage) {
            this.CreateSessionAsync(inXml, errorMessage, null);
        }
        
        public void CreateSessionAsync(string inXml, string errorMessage, object userState) {
            if ((this.onBeginCreateSessionDelegate == null)) {
                this.onBeginCreateSessionDelegate = new BeginOperationDelegate(this.OnBeginCreateSession);
            }
            if ((this.onEndCreateSessionDelegate == null)) {
                this.onEndCreateSessionDelegate = new EndOperationDelegate(this.OnEndCreateSession);
            }
            if ((this.onCreateSessionCompletedDelegate == null)) {
                this.onCreateSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateSessionCompleted);
            }
            base.InvokeAsync(this.onBeginCreateSessionDelegate, new object[] {
                        inXml,
                        errorMessage}, this.onEndCreateSessionDelegate, this.onCreateSessionCompletedDelegate, userState);
        }
        
        public string Exec(string inXML, ref string sessionHandle, ref string errors) {
            return base.Channel.Exec(inXML, ref sessionHandle, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExec(string inXML, ref string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExec(inXML, ref sessionHandle, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndExec(ref string sessionHandle, ref string errors, System.IAsyncResult result) {
            return base.Channel.EndExec(ref sessionHandle, ref errors, result);
        }
        
        private System.IAsyncResult OnBeginExec(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inXML = ((string)(inValues[0]));
            string sessionHandle = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return this.BeginExec(inXML, ref sessionHandle, ref errors, callback, asyncState);
        }
        
        private object[] OnEndExec(System.IAsyncResult result) {
            string sessionHandle = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndExec(ref sessionHandle, ref errors, result);
            return new object[] {
                    sessionHandle,
                    errors,
                    retVal};
        }
        
        private void OnExecCompleted(object state) {
            if ((this.ExecCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecCompleted(this, new ExecCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecAsync(string inXML, string sessionHandle, string errors) {
            this.ExecAsync(inXML, sessionHandle, errors, null);
        }
        
        public void ExecAsync(string inXML, string sessionHandle, string errors, object userState) {
            if ((this.onBeginExecDelegate == null)) {
                this.onBeginExecDelegate = new BeginOperationDelegate(this.OnBeginExec);
            }
            if ((this.onEndExecDelegate == null)) {
                this.onEndExecDelegate = new EndOperationDelegate(this.OnEndExec);
            }
            if ((this.onExecCompletedDelegate == null)) {
                this.onExecCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecCompleted);
            }
            base.InvokeAsync(this.onBeginExecDelegate, new object[] {
                        inXML,
                        sessionHandle,
                        errors}, this.onEndExecDelegate, this.onExecCompletedDelegate, userState);
        }
        
        public string ExecTimed(string inXML, ref string sessionHandle, ref string errors, ref long responseTime) {
            return base.Channel.ExecTimed(inXML, ref sessionHandle, ref errors, ref responseTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecTimed(string inXML, ref string sessionHandle, ref string errors, ref long responseTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecTimed(inXML, ref sessionHandle, ref errors, ref responseTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndExecTimed(ref string sessionHandle, ref string errors, ref long responseTime, System.IAsyncResult result) {
            return base.Channel.EndExecTimed(ref sessionHandle, ref errors, ref responseTime, result);
        }
        
        private System.IAsyncResult OnBeginExecTimed(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inXML = ((string)(inValues[0]));
            string sessionHandle = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            long responseTime = ((long)(inValues[3]));
            return this.BeginExecTimed(inXML, ref sessionHandle, ref errors, ref responseTime, callback, asyncState);
        }
        
        private object[] OnEndExecTimed(System.IAsyncResult result) {
            string sessionHandle = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            long responseTime = this.GetDefaultValueForInitialization<long>();
            string retVal = this.EndExecTimed(ref sessionHandle, ref errors, ref responseTime, result);
            return new object[] {
                    sessionHandle,
                    errors,
                    responseTime,
                    retVal};
        }
        
        private void OnExecTimedCompleted(object state) {
            if ((this.ExecTimedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecTimedCompleted(this, new ExecTimedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecTimedAsync(string inXML, string sessionHandle, string errors, long responseTime) {
            this.ExecTimedAsync(inXML, sessionHandle, errors, responseTime, null);
        }
        
        public void ExecTimedAsync(string inXML, string sessionHandle, string errors, long responseTime, object userState) {
            if ((this.onBeginExecTimedDelegate == null)) {
                this.onBeginExecTimedDelegate = new BeginOperationDelegate(this.OnBeginExecTimed);
            }
            if ((this.onEndExecTimedDelegate == null)) {
                this.onEndExecTimedDelegate = new EndOperationDelegate(this.OnEndExecTimed);
            }
            if ((this.onExecTimedCompletedDelegate == null)) {
                this.onExecTimedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecTimedCompleted);
            }
            base.InvokeAsync(this.onBeginExecTimedDelegate, new object[] {
                        inXML,
                        sessionHandle,
                        errors,
                        responseTime}, this.onEndExecTimedDelegate, this.onExecTimedCompletedDelegate, userState);
        }
        
        public string ExecLogged(string inXML, ref string sessionHandle, bool logRequests, bool logResponses, ref string errors) {
            return base.Channel.ExecLogged(inXML, ref sessionHandle, logRequests, logResponses, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecLogged(string inXML, ref string sessionHandle, bool logRequests, bool logResponses, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecLogged(inXML, ref sessionHandle, logRequests, logResponses, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndExecLogged(ref string sessionHandle, ref string errors, System.IAsyncResult result) {
            return base.Channel.EndExecLogged(ref sessionHandle, ref errors, result);
        }
        
        private System.IAsyncResult OnBeginExecLogged(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inXML = ((string)(inValues[0]));
            string sessionHandle = ((string)(inValues[1]));
            bool logRequests = ((bool)(inValues[2]));
            bool logResponses = ((bool)(inValues[3]));
            string errors = ((string)(inValues[4]));
            return this.BeginExecLogged(inXML, ref sessionHandle, logRequests, logResponses, ref errors, callback, asyncState);
        }
        
        private object[] OnEndExecLogged(System.IAsyncResult result) {
            string sessionHandle = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndExecLogged(ref sessionHandle, ref errors, result);
            return new object[] {
                    sessionHandle,
                    errors,
                    retVal};
        }
        
        private void OnExecLoggedCompleted(object state) {
            if ((this.ExecLoggedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecLoggedCompleted(this, new ExecLoggedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecLoggedAsync(string inXML, string sessionHandle, bool logRequests, bool logResponses, string errors) {
            this.ExecLoggedAsync(inXML, sessionHandle, logRequests, logResponses, errors, null);
        }
        
        public void ExecLoggedAsync(string inXML, string sessionHandle, bool logRequests, bool logResponses, string errors, object userState) {
            if ((this.onBeginExecLoggedDelegate == null)) {
                this.onBeginExecLoggedDelegate = new BeginOperationDelegate(this.OnBeginExecLogged);
            }
            if ((this.onEndExecLoggedDelegate == null)) {
                this.onEndExecLoggedDelegate = new EndOperationDelegate(this.OnEndExecLogged);
            }
            if ((this.onExecLoggedCompletedDelegate == null)) {
                this.onExecLoggedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecLoggedCompleted);
            }
            base.InvokeAsync(this.onBeginExecLoggedDelegate, new object[] {
                        inXML,
                        sessionHandle,
                        logRequests,
                        logResponses,
                        errors}, this.onEndExecLoggedDelegate, this.onExecLoggedCompletedDelegate, userState);
        }
        
        public string ExecAnonymous(string site, string inXml, ref string errors) {
            return base.Channel.ExecAnonymous(site, inXml, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecAnonymous(string site, string inXml, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecAnonymous(site, inXml, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndExecAnonymous(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndExecAnonymous(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginExecAnonymous(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string site = ((string)(inValues[0]));
            string inXml = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return this.BeginExecAnonymous(site, inXml, ref errors, callback, asyncState);
        }
        
        private object[] OnEndExecAnonymous(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndExecAnonymous(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnExecAnonymousCompleted(object state) {
            if ((this.ExecAnonymousCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecAnonymousCompleted(this, new ExecAnonymousCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecAnonymousAsync(string site, string inXml, string errors) {
            this.ExecAnonymousAsync(site, inXml, errors, null);
        }
        
        public void ExecAnonymousAsync(string site, string inXml, string errors, object userState) {
            if ((this.onBeginExecAnonymousDelegate == null)) {
                this.onBeginExecAnonymousDelegate = new BeginOperationDelegate(this.OnBeginExecAnonymous);
            }
            if ((this.onEndExecAnonymousDelegate == null)) {
                this.onEndExecAnonymousDelegate = new EndOperationDelegate(this.OnEndExecAnonymous);
            }
            if ((this.onExecAnonymousCompletedDelegate == null)) {
                this.onExecAnonymousCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecAnonymousCompleted);
            }
            base.InvokeAsync(this.onBeginExecAnonymousDelegate, new object[] {
                        site,
                        inXml,
                        errors}, this.onEndExecAnonymousDelegate, this.onExecAnonymousCompletedDelegate, userState);
        }
        
        public string ListAvailableSites(ref string errors) {
            return base.Channel.ListAvailableSites(ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginListAvailableSites(ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListAvailableSites(ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndListAvailableSites(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndListAvailableSites(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginListAvailableSites(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string errors = ((string)(inValues[0]));
            return this.BeginListAvailableSites(ref errors, callback, asyncState);
        }
        
        private object[] OnEndListAvailableSites(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndListAvailableSites(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnListAvailableSitesCompleted(object state) {
            if ((this.ListAvailableSitesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListAvailableSitesCompleted(this, new ListAvailableSitesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListAvailableSitesAsync(string errors) {
            this.ListAvailableSitesAsync(errors, null);
        }
        
        public void ListAvailableSitesAsync(string errors, object userState) {
            if ((this.onBeginListAvailableSitesDelegate == null)) {
                this.onBeginListAvailableSitesDelegate = new BeginOperationDelegate(this.OnBeginListAvailableSites);
            }
            if ((this.onEndListAvailableSitesDelegate == null)) {
                this.onEndListAvailableSitesDelegate = new EndOperationDelegate(this.OnEndListAvailableSites);
            }
            if ((this.onListAvailableSitesCompletedDelegate == null)) {
                this.onListAvailableSitesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListAvailableSitesCompleted);
            }
            base.InvokeAsync(this.onBeginListAvailableSitesDelegate, new object[] {
                        errors}, this.onEndListAvailableSitesDelegate, this.onListAvailableSitesCompletedDelegate, userState);
        }
        
        public bool Ping(string sessionHandle) {
            return base.Channel.Ping(sessionHandle);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPing(string sessionHandle, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(sessionHandle, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPing(System.IAsyncResult result) {
            return base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionHandle = ((string)(inValues[0]));
            return this.BeginPing(sessionHandle, callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            bool retVal = this.EndPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new PingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync(string sessionHandle) {
            this.PingAsync(sessionHandle, null);
        }
        
        public void PingAsync(string sessionHandle, object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, new object[] {
                        sessionHandle}, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        public int PingWithLoad(object payload) {
            return base.Channel.PingWithLoad(payload);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPingWithLoad(object payload, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPingWithLoad(payload, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndPingWithLoad(System.IAsyncResult result) {
            return base.Channel.EndPingWithLoad(result);
        }
        
        private System.IAsyncResult OnBeginPingWithLoad(object[] inValues, System.AsyncCallback callback, object asyncState) {
            object payload = ((object)(inValues[0]));
            return this.BeginPingWithLoad(payload, callback, asyncState);
        }
        
        private object[] OnEndPingWithLoad(System.IAsyncResult result) {
            int retVal = this.EndPingWithLoad(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingWithLoadCompleted(object state) {
            if ((this.PingWithLoadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingWithLoadCompleted(this, new PingWithLoadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingWithLoadAsync(object payload) {
            this.PingWithLoadAsync(payload, null);
        }
        
        public void PingWithLoadAsync(object payload, object userState) {
            if ((this.onBeginPingWithLoadDelegate == null)) {
                this.onBeginPingWithLoadDelegate = new BeginOperationDelegate(this.OnBeginPingWithLoad);
            }
            if ((this.onEndPingWithLoadDelegate == null)) {
                this.onEndPingWithLoadDelegate = new EndOperationDelegate(this.OnEndPingWithLoad);
            }
            if ((this.onPingWithLoadCompletedDelegate == null)) {
                this.onPingWithLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingWithLoadCompleted);
            }
            base.InvokeAsync(this.onBeginPingWithLoadDelegate, new object[] {
                        payload}, this.onEndPingWithLoadDelegate, this.onPingWithLoadCompletedDelegate, userState);
        }
        
        public string ProcessEDI(string EDIAccessKey, string site, string inXml, string xsdURL, ref string errors) {
            return base.Channel.ProcessEDI(EDIAccessKey, site, inXml, xsdURL, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProcessEDI(string EDIAccessKey, string site, string inXml, string xsdURL, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProcessEDI(EDIAccessKey, site, inXml, xsdURL, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndProcessEDI(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndProcessEDI(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginProcessEDI(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EDIAccessKey = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string inXml = ((string)(inValues[2]));
            string xsdURL = ((string)(inValues[3]));
            string errors = ((string)(inValues[4]));
            return this.BeginProcessEDI(EDIAccessKey, site, inXml, xsdURL, ref errors, callback, asyncState);
        }
        
        private object[] OnEndProcessEDI(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndProcessEDI(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnProcessEDICompleted(object state) {
            if ((this.ProcessEDICompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProcessEDICompleted(this, new ProcessEDICompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProcessEDIAsync(string EDIAccessKey, string site, string inXml, string xsdURL, string errors) {
            this.ProcessEDIAsync(EDIAccessKey, site, inXml, xsdURL, errors, null);
        }
        
        public void ProcessEDIAsync(string EDIAccessKey, string site, string inXml, string xsdURL, string errors, object userState) {
            if ((this.onBeginProcessEDIDelegate == null)) {
                this.onBeginProcessEDIDelegate = new BeginOperationDelegate(this.OnBeginProcessEDI);
            }
            if ((this.onEndProcessEDIDelegate == null)) {
                this.onEndProcessEDIDelegate = new EndOperationDelegate(this.OnEndProcessEDI);
            }
            if ((this.onProcessEDICompletedDelegate == null)) {
                this.onProcessEDICompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProcessEDICompleted);
            }
            base.InvokeAsync(this.onBeginProcessEDIDelegate, new object[] {
                        EDIAccessKey,
                        site,
                        inXml,
                        xsdURL,
                        errors}, this.onEndProcessEDIDelegate, this.onProcessEDICompletedDelegate, userState);
        }
        
        public bool ReleaseSession(string sessionHandle, ref string errors) {
            return base.Channel.ReleaseSession(sessionHandle, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReleaseSession(string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReleaseSession(sessionHandle, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndReleaseSession(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndReleaseSession(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginReleaseSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionHandle = ((string)(inValues[0]));
            string errors = ((string)(inValues[1]));
            return this.BeginReleaseSession(sessionHandle, ref errors, callback, asyncState);
        }
        
        private object[] OnEndReleaseSession(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndReleaseSession(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnReleaseSessionCompleted(object state) {
            if ((this.ReleaseSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReleaseSessionCompleted(this, new ReleaseSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReleaseSessionAsync(string sessionHandle, string errors) {
            this.ReleaseSessionAsync(sessionHandle, errors, null);
        }
        
        public void ReleaseSessionAsync(string sessionHandle, string errors, object userState) {
            if ((this.onBeginReleaseSessionDelegate == null)) {
                this.onBeginReleaseSessionDelegate = new BeginOperationDelegate(this.OnBeginReleaseSession);
            }
            if ((this.onEndReleaseSessionDelegate == null)) {
                this.onEndReleaseSessionDelegate = new EndOperationDelegate(this.OnEndReleaseSession);
            }
            if ((this.onReleaseSessionCompletedDelegate == null)) {
                this.onReleaseSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReleaseSessionCompleted);
            }
            base.InvokeAsync(this.onBeginReleaseSessionDelegate, new object[] {
                        sessionHandle,
                        errors}, this.onEndReleaseSessionDelegate, this.onReleaseSessionCompletedDelegate, userState);
        }
        
        public string Test(string val) {
            return base.Channel.Test(val);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTest(string val, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTest(val, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndTest(System.IAsyncResult result) {
            return base.Channel.EndTest(result);
        }
        
        private System.IAsyncResult OnBeginTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string val = ((string)(inValues[0]));
            return this.BeginTest(val, callback, asyncState);
        }
        
        private object[] OnEndTest(System.IAsyncResult result) {
            string retVal = this.EndTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCompleted(object state) {
            if ((this.TestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCompleted(this, new TestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestAsync(string val) {
            this.TestAsync(val, null);
        }
        
        public void TestAsync(string val, object userState) {
            if ((this.onBeginTestDelegate == null)) {
                this.onBeginTestDelegate = new BeginOperationDelegate(this.OnBeginTest);
            }
            if ((this.onEndTestDelegate == null)) {
                this.onEndTestDelegate = new EndOperationDelegate(this.OnEndTest);
            }
            if ((this.onTestCompletedDelegate == null)) {
                this.onTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCompleted);
            }
            base.InvokeAsync(this.onBeginTestDelegate, new object[] {
                        val}, this.onEndTestDelegate, this.onTestCompletedDelegate, userState);
        }
        
        public int TrickleContent(string key, byte[] bytes, ref string errors) {
            return base.Channel.TrickleContent(key, bytes, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTrickleContent(string key, byte[] bytes, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTrickleContent(key, bytes, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndTrickleContent(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndTrickleContent(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginTrickleContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            byte[] bytes = ((byte[])(inValues[1]));
            string errors = ((string)(inValues[2]));
            return this.BeginTrickleContent(key, bytes, ref errors, callback, asyncState);
        }
        
        private object[] OnEndTrickleContent(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            int retVal = this.EndTrickleContent(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnTrickleContentCompleted(object state) {
            if ((this.TrickleContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TrickleContentCompleted(this, new TrickleContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TrickleContentAsync(string key, byte[] bytes, string errors) {
            this.TrickleContentAsync(key, bytes, errors, null);
        }
        
        public void TrickleContentAsync(string key, byte[] bytes, string errors, object userState) {
            if ((this.onBeginTrickleContentDelegate == null)) {
                this.onBeginTrickleContentDelegate = new BeginOperationDelegate(this.OnBeginTrickleContent);
            }
            if ((this.onEndTrickleContentDelegate == null)) {
                this.onEndTrickleContentDelegate = new EndOperationDelegate(this.OnEndTrickleContent);
            }
            if ((this.onTrickleContentCompletedDelegate == null)) {
                this.onTrickleContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTrickleContentCompleted);
            }
            base.InvokeAsync(this.onBeginTrickleContentDelegate, new object[] {
                        key,
                        bytes,
                        errors}, this.onEndTrickleContentDelegate, this.onTrickleContentCompletedDelegate, userState);
        }
        
        public bool WebServerPing() {
            return base.Channel.WebServerPing();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginWebServerPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWebServerPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndWebServerPing(System.IAsyncResult result) {
            return base.Channel.EndWebServerPing(result);
        }
        
        private System.IAsyncResult OnBeginWebServerPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginWebServerPing(callback, asyncState);
        }
        
        private object[] OnEndWebServerPing(System.IAsyncResult result) {
            bool retVal = this.EndWebServerPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnWebServerPingCompleted(object state) {
            if ((this.WebServerPingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WebServerPingCompleted(this, new WebServerPingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WebServerPingAsync() {
            this.WebServerPingAsync(null);
        }
        
        public void WebServerPingAsync(object userState) {
            if ((this.onBeginWebServerPingDelegate == null)) {
                this.onBeginWebServerPingDelegate = new BeginOperationDelegate(this.OnBeginWebServerPing);
            }
            if ((this.onEndWebServerPingDelegate == null)) {
                this.onEndWebServerPingDelegate = new EndOperationDelegate(this.OnEndWebServerPing);
            }
            if ((this.onWebServerPingCompletedDelegate == null)) {
                this.onWebServerPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWebServerPingCompleted);
            }
            base.InvokeAsync(this.onBeginWebServerPingDelegate, null, this.onEndWebServerPingDelegate, this.onWebServerPingCompletedDelegate, userState);
        }
        
        public bool SiteManagerPing() {
            return base.Channel.SiteManagerPing();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSiteManagerPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSiteManagerPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSiteManagerPing(System.IAsyncResult result) {
            return base.Channel.EndSiteManagerPing(result);
        }
        
        private System.IAsyncResult OnBeginSiteManagerPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSiteManagerPing(callback, asyncState);
        }
        
        private object[] OnEndSiteManagerPing(System.IAsyncResult result) {
            bool retVal = this.EndSiteManagerPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSiteManagerPingCompleted(object state) {
            if ((this.SiteManagerPingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SiteManagerPingCompleted(this, new SiteManagerPingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SiteManagerPingAsync() {
            this.SiteManagerPingAsync(null);
        }
        
        public void SiteManagerPingAsync(object userState) {
            if ((this.onBeginSiteManagerPingDelegate == null)) {
                this.onBeginSiteManagerPingDelegate = new BeginOperationDelegate(this.OnBeginSiteManagerPing);
            }
            if ((this.onEndSiteManagerPingDelegate == null)) {
                this.onEndSiteManagerPingDelegate = new EndOperationDelegate(this.OnEndSiteManagerPing);
            }
            if ((this.onSiteManagerPingCompletedDelegate == null)) {
                this.onSiteManagerPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSiteManagerPingCompleted);
            }
            base.InvokeAsync(this.onBeginSiteManagerPingDelegate, null, this.onEndSiteManagerPingDelegate, this.onSiteManagerPingCompletedDelegate, userState);
        }
        
        public string GetSchemaForActivity(string site, string activity, ref string errors) {
            return base.Channel.GetSchemaForActivity(site, activity, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSchemaForActivity(string site, string activity, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSchemaForActivity(site, activity, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetSchemaForActivity(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndGetSchemaForActivity(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginGetSchemaForActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string site = ((string)(inValues[0]));
            string activity = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return this.BeginGetSchemaForActivity(site, activity, ref errors, callback, asyncState);
        }
        
        private object[] OnEndGetSchemaForActivity(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndGetSchemaForActivity(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnGetSchemaForActivityCompleted(object state) {
            if ((this.GetSchemaForActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSchemaForActivityCompleted(this, new GetSchemaForActivityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSchemaForActivityAsync(string site, string activity, string errors) {
            this.GetSchemaForActivityAsync(site, activity, errors, null);
        }
        
        public void GetSchemaForActivityAsync(string site, string activity, string errors, object userState) {
            if ((this.onBeginGetSchemaForActivityDelegate == null)) {
                this.onBeginGetSchemaForActivityDelegate = new BeginOperationDelegate(this.OnBeginGetSchemaForActivity);
            }
            if ((this.onEndGetSchemaForActivityDelegate == null)) {
                this.onEndGetSchemaForActivityDelegate = new EndOperationDelegate(this.OnEndGetSchemaForActivity);
            }
            if ((this.onGetSchemaForActivityCompletedDelegate == null)) {
                this.onGetSchemaForActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSchemaForActivityCompleted);
            }
            base.InvokeAsync(this.onBeginGetSchemaForActivityDelegate, new object[] {
                        site,
                        activity,
                        errors}, this.onEndGetSchemaForActivityDelegate, this.onGetSchemaForActivityCompletedDelegate, userState);
        }
        
        public string ListActivitiesForSite(string site, ref string errors) {
            return base.Channel.ListActivitiesForSite(site, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginListActivitiesForSite(string site, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListActivitiesForSite(site, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndListActivitiesForSite(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndListActivitiesForSite(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginListActivitiesForSite(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string site = ((string)(inValues[0]));
            string errors = ((string)(inValues[1]));
            return this.BeginListActivitiesForSite(site, ref errors, callback, asyncState);
        }
        
        private object[] OnEndListActivitiesForSite(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndListActivitiesForSite(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnListActivitiesForSiteCompleted(object state) {
            if ((this.ListActivitiesForSiteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListActivitiesForSiteCompleted(this, new ListActivitiesForSiteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListActivitiesForSiteAsync(string site, string errors) {
            this.ListActivitiesForSiteAsync(site, errors, null);
        }
        
        public void ListActivitiesForSiteAsync(string site, string errors, object userState) {
            if ((this.onBeginListActivitiesForSiteDelegate == null)) {
                this.onBeginListActivitiesForSiteDelegate = new BeginOperationDelegate(this.OnBeginListActivitiesForSite);
            }
            if ((this.onEndListActivitiesForSiteDelegate == null)) {
                this.onEndListActivitiesForSiteDelegate = new EndOperationDelegate(this.OnEndListActivitiesForSite);
            }
            if ((this.onListActivitiesForSiteCompletedDelegate == null)) {
                this.onListActivitiesForSiteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListActivitiesForSiteCompleted);
            }
            base.InvokeAsync(this.onBeginListActivitiesForSiteDelegate, new object[] {
                        site,
                        errors}, this.onEndListActivitiesForSiteDelegate, this.onListActivitiesForSiteCompletedDelegate, userState);
        }
        
        public System.IO.Stream GetBlob(string sessionHandle, string activityHandle, string blobId, bool isbyteArray) {
            return base.Channel.GetBlob(sessionHandle, activityHandle, blobId, isbyteArray);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBlob(string sessionHandle, string activityHandle, string blobId, bool isbyteArray, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBlob(sessionHandle, activityHandle, blobId, isbyteArray, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.Stream EndGetBlob(System.IAsyncResult result) {
            return base.Channel.EndGetBlob(result);
        }
        
        private System.IAsyncResult OnBeginGetBlob(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionHandle = ((string)(inValues[0]));
            string activityHandle = ((string)(inValues[1]));
            string blobId = ((string)(inValues[2]));
            bool isbyteArray = ((bool)(inValues[3]));
            return this.BeginGetBlob(sessionHandle, activityHandle, blobId, isbyteArray, callback, asyncState);
        }
        
        private object[] OnEndGetBlob(System.IAsyncResult result) {
            System.IO.Stream retVal = this.EndGetBlob(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBlobCompleted(object state) {
            if ((this.GetBlobCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBlobCompleted(this, new GetBlobCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBlobAsync(string sessionHandle, string activityHandle, string blobId, bool isbyteArray) {
            this.GetBlobAsync(sessionHandle, activityHandle, blobId, isbyteArray, null);
        }
        
        public void GetBlobAsync(string sessionHandle, string activityHandle, string blobId, bool isbyteArray, object userState) {
            if ((this.onBeginGetBlobDelegate == null)) {
                this.onBeginGetBlobDelegate = new BeginOperationDelegate(this.OnBeginGetBlob);
            }
            if ((this.onEndGetBlobDelegate == null)) {
                this.onEndGetBlobDelegate = new EndOperationDelegate(this.OnEndGetBlob);
            }
            if ((this.onGetBlobCompletedDelegate == null)) {
                this.onGetBlobCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBlobCompleted);
            }
            base.InvokeAsync(this.onBeginGetBlobDelegate, new object[] {
                        sessionHandle,
                        activityHandle,
                        blobId,
                        isbyteArray}, this.onEndGetBlobDelegate, this.onGetBlobCompletedDelegate, userState);
        }
        
        public System.IO.Stream GetFile(string sessionHandle, string fileName, bool isbyteArray) {
            return base.Channel.GetFile(sessionHandle, fileName, isbyteArray);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFile(string sessionHandle, string fileName, bool isbyteArray, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFile(sessionHandle, fileName, isbyteArray, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IO.Stream EndGetFile(System.IAsyncResult result) {
            return base.Channel.EndGetFile(result);
        }
        
        private System.IAsyncResult OnBeginGetFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionHandle = ((string)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            bool isbyteArray = ((bool)(inValues[2]));
            return this.BeginGetFile(sessionHandle, fileName, isbyteArray, callback, asyncState);
        }
        
        private object[] OnEndGetFile(System.IAsyncResult result) {
            System.IO.Stream retVal = this.EndGetFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileCompleted(object state) {
            if ((this.GetFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileAsync(string sessionHandle, string fileName, bool isbyteArray) {
            this.GetFileAsync(sessionHandle, fileName, isbyteArray, null);
        }
        
        public void GetFileAsync(string sessionHandle, string fileName, bool isbyteArray, object userState) {
            if ((this.onBeginGetFileDelegate == null)) {
                this.onBeginGetFileDelegate = new BeginOperationDelegate(this.OnBeginGetFile);
            }
            if ((this.onEndGetFileDelegate == null)) {
                this.onEndGetFileDelegate = new EndOperationDelegate(this.OnEndGetFile);
            }
            if ((this.onGetFileCompletedDelegate == null)) {
                this.onGetFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileDelegate, new object[] {
                        sessionHandle,
                        fileName,
                        isbyteArray}, this.onEndGetFileDelegate, this.onGetFileCompletedDelegate, userState);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.expanz.com/ESAAdminService", ConfigurationName="ESAPortal.IESAAdminService")]
    public interface IESAAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/AddSite", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/AddSiteResponse")]
        bool AddSite(string masterPassword, string site, string name, string authMethod, ref string messages);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/AddSite", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/AddSiteResponse")]
        System.IAsyncResult BeginAddSite(string masterPassword, string site, string name, string authMethod, ref string messages, System.AsyncCallback callback, object asyncState);
        
        bool EndAddSite(ref string messages, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/BroadcastMessage", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/BroadcastMessageResponse")]
        string BroadcastMessage(string masterPassword, string site, string message, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/BroadcastMessage", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/BroadcastMessageResponse")]
        System.IAsyncResult BeginBroadcastMessage(string masterPassword, string site, string message, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndBroadcastMessage(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ChangeUserPassword", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ChangeUserPasswordResponse" +
            "")]
        bool ChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ChangeUserPassword", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ChangeUserPasswordResponse" +
            "")]
        System.IAsyncResult BeginChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndChangeUserPassword(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateAdminSession", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateAdminSessionResponse" +
            "")]
        string CreateAdminSession(string user, string password, ref string errorMessage);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateAdminSession", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateAdminSessionResponse" +
            "")]
        System.IAsyncResult BeginCreateAdminSession(string user, string password, ref string errorMessage, System.AsyncCallback callback, object asyncState);
        
        string EndCreateAdminSession(ref string errorMessage, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateUser", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateUserResponse")]
        bool CreateUser(string masterPassword, string user, string description, string userPassword, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateUser", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/CreateUserResponse")]
        System.IAsyncResult BeginCreateUser(string masterPassword, string user, string description, string userPassword, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndCreateUser(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/DeleteUser", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/DeleteUserResponse")]
        bool DeleteUser(string masterPassword, string user, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/DeleteUser", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(string masterPassword, string user, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteUser(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/DisableSessionManager", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/DisableSessionManagerRespo" +
            "nse")]
        bool DisableSessionManager(string masterPassword, string site, string SessionManagerURI, bool disable, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/DisableSessionManager", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/DisableSessionManagerRespo" +
            "nse")]
        System.IAsyncResult BeginDisableSessionManager(string masterPassword, string site, string SessionManagerURI, bool disable, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndDisableSessionManager(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionManagersForSite" +
            "", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionManagersForSite" +
            "Response")]
        string ListSessionManagersForSite(string masterPassword, string site, ref string messages);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionManagersForSite" +
            "", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionManagersForSite" +
            "Response")]
        System.IAsyncResult BeginListSessionManagersForSite(string masterPassword, string site, ref string messages, System.AsyncCallback callback, object asyncState);
        
        string EndListSessionManagersForSite(ref string messages, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionsForServer", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionsForServerRespo" +
            "nse")]
        string ListSessionsForServer(string serverURI, string password, ref string messages);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionsForServer", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ListSessionsForServerRespo" +
            "nse")]
        System.IAsyncResult BeginListSessionsForServer(string serverURI, string password, ref string messages, System.AsyncCallback callback, object asyncState);
        
        string EndListSessionsForServer(ref string messages, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ListUsers", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ListUsersResponse")]
        string ListUsers(string masterPassword, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ListUsers", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ListUsersResponse")]
        System.IAsyncResult BeginListUsers(string masterPassword, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndListUsers(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ResetUserPassword", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ResetUserPasswordResponse")]
        bool ResetUserPassword(string masterPassword, string user, string password, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ResetUserPassword", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ResetUserPasswordResponse")]
        System.IAsyncResult BeginResetUserPassword(string masterPassword, string user, string password, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndResetUserPassword(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/SetSessionManagerLoggingPr" +
            "ofile", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/SetSessionManagerLoggingPr" +
            "ofileResponse")]
        bool SetSessionManagerLoggingProfile(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/SetSessionManagerLoggingPr" +
            "ofile", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/SetSessionManagerLoggingPr" +
            "ofileResponse")]
        System.IAsyncResult BeginSetSessionManagerLoggingProfile(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndSetSessionManagerLoggingProfile(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsBegin", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsBeginRespons" +
            "e")]
        bool ExportAllBlobsBegin(string masterPassword, string site, string accountName, string accountKey, ref string handle, ref string errors, ref int totalBlobs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsBegin", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsBeginRespons" +
            "e")]
        System.IAsyncResult BeginExportAllBlobsBegin(string masterPassword, string site, string accountName, string accountKey, ref string handle, ref string errors, ref int totalBlobs, System.AsyncCallback callback, object asyncState);
        
        bool EndExportAllBlobsBegin(ref string handle, ref string errors, ref int totalBlobs, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsChunk", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsChunkRespons" +
            "e")]
        bool ExportAllBlobsChunk(string sessionHandle, ref string messages, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsChunk", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsChunkRespons" +
            "e")]
        System.IAsyncResult BeginExportAllBlobsChunk(string sessionHandle, ref string messages, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndExportAllBlobsChunk(ref string messages, ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsCleanup", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsCleanupRespo" +
            "nse")]
        void ExportAllBlobsCleanup(string sessionHandle, bool ok);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsCleanup", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/ExportAllBlobsCleanupRespo" +
            "nse")]
        System.IAsyncResult BeginExportAllBlobsCleanup(string sessionHandle, bool ok, System.AsyncCallback callback, object asyncState);
        
        void EndExportAllBlobsCleanup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/SyncronisePersistentSchema" +
            "", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/SyncronisePersistentSchema" +
            "Response")]
        bool SyncronisePersistentSchema(string masterPassword, string site, ref string messages, ref string errors, ref string DBML, bool apply, ref string script);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/SyncronisePersistentSchema" +
            "", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/SyncronisePersistentSchema" +
            "Response")]
        System.IAsyncResult BeginSyncronisePersistentSchema(string masterPassword, string site, ref string messages, ref string errors, ref string DBML, bool apply, ref string script, System.AsyncCallback callback, object asyncState);
        
        bool EndSyncronisePersistentSchema(ref string messages, ref string errors, ref string DBML, ref string script, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/TerminateSession", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/TerminateSessionResponse")]
        bool TerminateSession(string site, string serverURI, string sessionHandle, string password, ref string messages);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/TerminateSession", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/TerminateSessionResponse")]
        System.IAsyncResult BeginTerminateSession(string site, string serverURI, string sessionHandle, string password, ref string messages, System.AsyncCallback callback, object asyncState);
        
        bool EndTerminateSession(ref string messages, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/SetTraceLogging", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/SetTraceLoggingResponse")]
        bool SetTraceLogging(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/SetTraceLogging", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/SetTraceLoggingResponse")]
        System.IAsyncResult BeginSetTraceLogging(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndSetTraceLogging(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/StopTraceLogging", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/StopTraceLoggingResponse")]
        bool StopTraceLogging(string masterPassword, string guid, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/StopTraceLogging", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/StopTraceLoggingResponse")]
        System.IAsyncResult BeginStopTraceLogging(string masterPassword, string guid, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndStopTraceLogging(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceLogs", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceLogsResponse")]
        string GetTraceLogs(string masterPassword, string site, bool activeOnly, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceLogs", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceLogsResponse")]
        System.IAsyncResult BeginGetTraceLogs(string masterPassword, string site, bool activeOnly, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndGetTraceLogs(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceDetail", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceDetailResponse")]
        string GetTraceDetail(string masterPassword, string guid, bool requestOnly, ref string errors, string sessionId, ref bool hasMoreRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceDetail", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/GetTraceDetailResponse")]
        System.IAsyncResult BeginGetTraceDetail(string masterPassword, string guid, bool requestOnly, ref string errors, string sessionId, ref bool hasMoreRows, System.AsyncCallback callback, object asyncState);
        
        string EndGetTraceDetail(ref string errors, ref bool hasMoreRows, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/EnableDiagnostics", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/EnableDiagnosticsResponse")]
        bool EnableDiagnostics(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/EnableDiagnostics", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/EnableDiagnosticsResponse")]
        System.IAsyncResult BeginEnableDiagnostics(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, ref string errors, System.AsyncCallback callback, object asyncState);
        
        bool EndEnableDiagnostics(ref string errors, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.expanz.com/ESAAdminService/IESAAdminService/GetLogsDetails", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/GetLogsDetailsResponse")]
        string GetLogsDetails(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, ref string errors);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.expanz.com/ESAAdminService/IESAAdminService/GetLogsDetails", ReplyAction="http://www.expanz.com/ESAAdminService/IESAAdminService/GetLogsDetailsResponse")]
        System.IAsyncResult BeginGetLogsDetails(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, ref string errors, System.AsyncCallback callback, object asyncState);
        
        string EndGetLogsDetails(ref string errors, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IESAAdminServiceChannel : Expanz.ThinRIA.ESAPortal.IESAAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BroadcastMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BroadcastMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeUserPasswordCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeUserPasswordCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateAdminSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateAdminSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errorMessage {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisableSessionManagerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisableSessionManagerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListSessionManagersForSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListSessionManagersForSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListSessionsForServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListSessionsForServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ListUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResetUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetSessionManagerLoggingProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetSessionManagerLoggingProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExportAllBlobsBeginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExportAllBlobsBeginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string handle {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public int totalBlobs {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExportAllBlobsChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExportAllBlobsChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SyncronisePersistentSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SyncronisePersistentSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string DBML {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string script {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TerminateSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TerminateSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string messages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetTraceLoggingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetTraceLoggingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StopTraceLoggingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StopTraceLoggingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTraceLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTraceLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTraceDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTraceDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool hasMoreRows {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EnableDiagnosticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EnableDiagnosticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLogsDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLogsDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string errors {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ESAAdminServiceClient : System.ServiceModel.ClientBase<Expanz.ThinRIA.ESAPortal.IESAAdminService>, Expanz.ThinRIA.ESAPortal.IESAAdminService {
        
        private BeginOperationDelegate onBeginAddSiteDelegate;
        
        private EndOperationDelegate onEndAddSiteDelegate;
        
        private System.Threading.SendOrPostCallback onAddSiteCompletedDelegate;
        
        private BeginOperationDelegate onBeginBroadcastMessageDelegate;
        
        private EndOperationDelegate onEndBroadcastMessageDelegate;
        
        private System.Threading.SendOrPostCallback onBroadcastMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeUserPasswordDelegate;
        
        private EndOperationDelegate onEndChangeUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onChangeUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateAdminSessionDelegate;
        
        private EndOperationDelegate onEndCreateAdminSessionDelegate;
        
        private System.Threading.SendOrPostCallback onCreateAdminSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateUserDelegate;
        
        private EndOperationDelegate onEndCreateUserDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisableSessionManagerDelegate;
        
        private EndOperationDelegate onEndDisableSessionManagerDelegate;
        
        private System.Threading.SendOrPostCallback onDisableSessionManagerCompletedDelegate;
        
        private BeginOperationDelegate onBeginListSessionManagersForSiteDelegate;
        
        private EndOperationDelegate onEndListSessionManagersForSiteDelegate;
        
        private System.Threading.SendOrPostCallback onListSessionManagersForSiteCompletedDelegate;
        
        private BeginOperationDelegate onBeginListSessionsForServerDelegate;
        
        private EndOperationDelegate onEndListSessionsForServerDelegate;
        
        private System.Threading.SendOrPostCallback onListSessionsForServerCompletedDelegate;
        
        private BeginOperationDelegate onBeginListUsersDelegate;
        
        private EndOperationDelegate onEndListUsersDelegate;
        
        private System.Threading.SendOrPostCallback onListUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetUserPasswordDelegate;
        
        private EndOperationDelegate onEndResetUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onResetUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetSessionManagerLoggingProfileDelegate;
        
        private EndOperationDelegate onEndSetSessionManagerLoggingProfileDelegate;
        
        private System.Threading.SendOrPostCallback onSetSessionManagerLoggingProfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportAllBlobsBeginDelegate;
        
        private EndOperationDelegate onEndExportAllBlobsBeginDelegate;
        
        private System.Threading.SendOrPostCallback onExportAllBlobsBeginCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportAllBlobsChunkDelegate;
        
        private EndOperationDelegate onEndExportAllBlobsChunkDelegate;
        
        private System.Threading.SendOrPostCallback onExportAllBlobsChunkCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportAllBlobsCleanupDelegate;
        
        private EndOperationDelegate onEndExportAllBlobsCleanupDelegate;
        
        private System.Threading.SendOrPostCallback onExportAllBlobsCleanupCompletedDelegate;
        
        private BeginOperationDelegate onBeginSyncronisePersistentSchemaDelegate;
        
        private EndOperationDelegate onEndSyncronisePersistentSchemaDelegate;
        
        private System.Threading.SendOrPostCallback onSyncronisePersistentSchemaCompletedDelegate;
        
        private BeginOperationDelegate onBeginTerminateSessionDelegate;
        
        private EndOperationDelegate onEndTerminateSessionDelegate;
        
        private System.Threading.SendOrPostCallback onTerminateSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetTraceLoggingDelegate;
        
        private EndOperationDelegate onEndSetTraceLoggingDelegate;
        
        private System.Threading.SendOrPostCallback onSetTraceLoggingCompletedDelegate;
        
        private BeginOperationDelegate onBeginStopTraceLoggingDelegate;
        
        private EndOperationDelegate onEndStopTraceLoggingDelegate;
        
        private System.Threading.SendOrPostCallback onStopTraceLoggingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTraceLogsDelegate;
        
        private EndOperationDelegate onEndGetTraceLogsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTraceLogsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTraceDetailDelegate;
        
        private EndOperationDelegate onEndGetTraceDetailDelegate;
        
        private System.Threading.SendOrPostCallback onGetTraceDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginEnableDiagnosticsDelegate;
        
        private EndOperationDelegate onEndEnableDiagnosticsDelegate;
        
        private System.Threading.SendOrPostCallback onEnableDiagnosticsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLogsDetailsDelegate;
        
        private EndOperationDelegate onEndGetLogsDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetLogsDetailsCompletedDelegate;
        
        public ESAAdminServiceClient() {
        }
        
        public ESAAdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ESAAdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ESAAdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ESAAdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<AddSiteCompletedEventArgs> AddSiteCompleted;
        
        public event System.EventHandler<BroadcastMessageCompletedEventArgs> BroadcastMessageCompleted;
        
        public event System.EventHandler<ChangeUserPasswordCompletedEventArgs1> ChangeUserPasswordCompleted;
        
        public event System.EventHandler<CreateAdminSessionCompletedEventArgs> CreateAdminSessionCompleted;
        
        public event System.EventHandler<CreateUserCompletedEventArgs> CreateUserCompleted;
        
        public event System.EventHandler<DeleteUserCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<DisableSessionManagerCompletedEventArgs> DisableSessionManagerCompleted;
        
        public event System.EventHandler<ListSessionManagersForSiteCompletedEventArgs> ListSessionManagersForSiteCompleted;
        
        public event System.EventHandler<ListSessionsForServerCompletedEventArgs> ListSessionsForServerCompleted;
        
        public event System.EventHandler<ListUsersCompletedEventArgs> ListUsersCompleted;
        
        public event System.EventHandler<ResetUserPasswordCompletedEventArgs> ResetUserPasswordCompleted;
        
        public event System.EventHandler<SetSessionManagerLoggingProfileCompletedEventArgs> SetSessionManagerLoggingProfileCompleted;
        
        public event System.EventHandler<ExportAllBlobsBeginCompletedEventArgs> ExportAllBlobsBeginCompleted;
        
        public event System.EventHandler<ExportAllBlobsChunkCompletedEventArgs> ExportAllBlobsChunkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExportAllBlobsCleanupCompleted;
        
        public event System.EventHandler<SyncronisePersistentSchemaCompletedEventArgs> SyncronisePersistentSchemaCompleted;
        
        public event System.EventHandler<TerminateSessionCompletedEventArgs> TerminateSessionCompleted;
        
        public event System.EventHandler<SetTraceLoggingCompletedEventArgs> SetTraceLoggingCompleted;
        
        public event System.EventHandler<StopTraceLoggingCompletedEventArgs> StopTraceLoggingCompleted;
        
        public event System.EventHandler<GetTraceLogsCompletedEventArgs> GetTraceLogsCompleted;
        
        public event System.EventHandler<GetTraceDetailCompletedEventArgs> GetTraceDetailCompleted;
        
        public event System.EventHandler<EnableDiagnosticsCompletedEventArgs> EnableDiagnosticsCompleted;
        
        public event System.EventHandler<GetLogsDetailsCompletedEventArgs> GetLogsDetailsCompleted;
        
        public bool AddSite(string masterPassword, string site, string name, string authMethod, ref string messages) {
            return base.Channel.AddSite(masterPassword, site, name, authMethod, ref messages);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddSite(string masterPassword, string site, string name, string authMethod, ref string messages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSite(masterPassword, site, name, authMethod, ref messages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddSite(ref string messages, System.IAsyncResult result) {
            return base.Channel.EndAddSite(ref messages, result);
        }
        
        private System.IAsyncResult OnBeginAddSite(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            string authMethod = ((string)(inValues[3]));
            string messages = ((string)(inValues[4]));
            return this.BeginAddSite(masterPassword, site, name, authMethod, ref messages, callback, asyncState);
        }
        
        private object[] OnEndAddSite(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndAddSite(ref messages, result);
            return new object[] {
                    messages,
                    retVal};
        }
        
        private void OnAddSiteCompleted(object state) {
            if ((this.AddSiteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSiteCompleted(this, new AddSiteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSiteAsync(string masterPassword, string site, string name, string authMethod, string messages) {
            this.AddSiteAsync(masterPassword, site, name, authMethod, messages, null);
        }
        
        public void AddSiteAsync(string masterPassword, string site, string name, string authMethod, string messages, object userState) {
            if ((this.onBeginAddSiteDelegate == null)) {
                this.onBeginAddSiteDelegate = new BeginOperationDelegate(this.OnBeginAddSite);
            }
            if ((this.onEndAddSiteDelegate == null)) {
                this.onEndAddSiteDelegate = new EndOperationDelegate(this.OnEndAddSite);
            }
            if ((this.onAddSiteCompletedDelegate == null)) {
                this.onAddSiteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSiteCompleted);
            }
            base.InvokeAsync(this.onBeginAddSiteDelegate, new object[] {
                        masterPassword,
                        site,
                        name,
                        authMethod,
                        messages}, this.onEndAddSiteDelegate, this.onAddSiteCompletedDelegate, userState);
        }
        
        public string BroadcastMessage(string masterPassword, string site, string message, ref string errors) {
            return base.Channel.BroadcastMessage(masterPassword, site, message, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBroadcastMessage(string masterPassword, string site, string message, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBroadcastMessage(masterPassword, site, message, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndBroadcastMessage(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndBroadcastMessage(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginBroadcastMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string message = ((string)(inValues[2]));
            string errors = ((string)(inValues[3]));
            return this.BeginBroadcastMessage(masterPassword, site, message, ref errors, callback, asyncState);
        }
        
        private object[] OnEndBroadcastMessage(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndBroadcastMessage(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnBroadcastMessageCompleted(object state) {
            if ((this.BroadcastMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BroadcastMessageCompleted(this, new BroadcastMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BroadcastMessageAsync(string masterPassword, string site, string message, string errors) {
            this.BroadcastMessageAsync(masterPassword, site, message, errors, null);
        }
        
        public void BroadcastMessageAsync(string masterPassword, string site, string message, string errors, object userState) {
            if ((this.onBeginBroadcastMessageDelegate == null)) {
                this.onBeginBroadcastMessageDelegate = new BeginOperationDelegate(this.OnBeginBroadcastMessage);
            }
            if ((this.onEndBroadcastMessageDelegate == null)) {
                this.onEndBroadcastMessageDelegate = new EndOperationDelegate(this.OnEndBroadcastMessage);
            }
            if ((this.onBroadcastMessageCompletedDelegate == null)) {
                this.onBroadcastMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBroadcastMessageCompleted);
            }
            base.InvokeAsync(this.onBeginBroadcastMessageDelegate, new object[] {
                        masterPassword,
                        site,
                        message,
                        errors}, this.onEndBroadcastMessageDelegate, this.onBroadcastMessageCompletedDelegate, userState);
        }
        
        public bool ChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors) {
            return base.Channel.ChangeUserPassword(user, oldPassword, newPassword, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangeUserPassword(string user, string oldPassword, string newPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeUserPassword(user, oldPassword, newPassword, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndChangeUserPassword(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndChangeUserPassword(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginChangeUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string oldPassword = ((string)(inValues[1]));
            string newPassword = ((string)(inValues[2]));
            string errors = ((string)(inValues[3]));
            return this.BeginChangeUserPassword(user, oldPassword, newPassword, ref errors, callback, asyncState);
        }
        
        private object[] OnEndChangeUserPassword(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndChangeUserPassword(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnChangeUserPasswordCompleted(object state) {
            if ((this.ChangeUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeUserPasswordCompleted(this, new ChangeUserPasswordCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeUserPasswordAsync(string user, string oldPassword, string newPassword, string errors) {
            this.ChangeUserPasswordAsync(user, oldPassword, newPassword, errors, null);
        }
        
        public void ChangeUserPasswordAsync(string user, string oldPassword, string newPassword, string errors, object userState) {
            if ((this.onBeginChangeUserPasswordDelegate == null)) {
                this.onBeginChangeUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginChangeUserPassword);
            }
            if ((this.onEndChangeUserPasswordDelegate == null)) {
                this.onEndChangeUserPasswordDelegate = new EndOperationDelegate(this.OnEndChangeUserPassword);
            }
            if ((this.onChangeUserPasswordCompletedDelegate == null)) {
                this.onChangeUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginChangeUserPasswordDelegate, new object[] {
                        user,
                        oldPassword,
                        newPassword,
                        errors}, this.onEndChangeUserPasswordDelegate, this.onChangeUserPasswordCompletedDelegate, userState);
        }
        
        public string CreateAdminSession(string user, string password, ref string errorMessage) {
            return base.Channel.CreateAdminSession(user, password, ref errorMessage);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateAdminSession(string user, string password, ref string errorMessage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateAdminSession(user, password, ref errorMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndCreateAdminSession(ref string errorMessage, System.IAsyncResult result) {
            return base.Channel.EndCreateAdminSession(ref errorMessage, result);
        }
        
        private System.IAsyncResult OnBeginCreateAdminSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string errorMessage = ((string)(inValues[2]));
            return this.BeginCreateAdminSession(user, password, ref errorMessage, callback, asyncState);
        }
        
        private object[] OnEndCreateAdminSession(System.IAsyncResult result) {
            string errorMessage = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndCreateAdminSession(ref errorMessage, result);
            return new object[] {
                    errorMessage,
                    retVal};
        }
        
        private void OnCreateAdminSessionCompleted(object state) {
            if ((this.CreateAdminSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateAdminSessionCompleted(this, new CreateAdminSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAdminSessionAsync(string user, string password, string errorMessage) {
            this.CreateAdminSessionAsync(user, password, errorMessage, null);
        }
        
        public void CreateAdminSessionAsync(string user, string password, string errorMessage, object userState) {
            if ((this.onBeginCreateAdminSessionDelegate == null)) {
                this.onBeginCreateAdminSessionDelegate = new BeginOperationDelegate(this.OnBeginCreateAdminSession);
            }
            if ((this.onEndCreateAdminSessionDelegate == null)) {
                this.onEndCreateAdminSessionDelegate = new EndOperationDelegate(this.OnEndCreateAdminSession);
            }
            if ((this.onCreateAdminSessionCompletedDelegate == null)) {
                this.onCreateAdminSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateAdminSessionCompleted);
            }
            base.InvokeAsync(this.onBeginCreateAdminSessionDelegate, new object[] {
                        user,
                        password,
                        errorMessage}, this.onEndCreateAdminSessionDelegate, this.onCreateAdminSessionCompletedDelegate, userState);
        }
        
        public bool CreateUser(string masterPassword, string user, string description, string userPassword, ref string errors) {
            return base.Channel.CreateUser(masterPassword, user, description, userPassword, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateUser(string masterPassword, string user, string description, string userPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateUser(masterPassword, user, description, userPassword, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCreateUser(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndCreateUser(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginCreateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string user = ((string)(inValues[1]));
            string description = ((string)(inValues[2]));
            string userPassword = ((string)(inValues[3]));
            string errors = ((string)(inValues[4]));
            return this.BeginCreateUser(masterPassword, user, description, userPassword, ref errors, callback, asyncState);
        }
        
        private object[] OnEndCreateUser(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndCreateUser(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnCreateUserCompleted(object state) {
            if ((this.CreateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserAsync(string masterPassword, string user, string description, string userPassword, string errors) {
            this.CreateUserAsync(masterPassword, user, description, userPassword, errors, null);
        }
        
        public void CreateUserAsync(string masterPassword, string user, string description, string userPassword, string errors, object userState) {
            if ((this.onBeginCreateUserDelegate == null)) {
                this.onBeginCreateUserDelegate = new BeginOperationDelegate(this.OnBeginCreateUser);
            }
            if ((this.onEndCreateUserDelegate == null)) {
                this.onEndCreateUserDelegate = new EndOperationDelegate(this.OnEndCreateUser);
            }
            if ((this.onCreateUserCompletedDelegate == null)) {
                this.onCreateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserDelegate, new object[] {
                        masterPassword,
                        user,
                        description,
                        userPassword,
                        errors}, this.onEndCreateUserDelegate, this.onCreateUserCompletedDelegate, userState);
        }
        
        public bool DeleteUser(string masterPassword, string user, ref string errors) {
            return base.Channel.DeleteUser(masterPassword, user, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteUser(string masterPassword, string user, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(masterPassword, user, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteUser(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndDeleteUser(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string user = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return this.BeginDeleteUser(masterPassword, user, ref errors, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDeleteUser(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(string masterPassword, string user, string errors) {
            this.DeleteUserAsync(masterPassword, user, errors, null);
        }
        
        public void DeleteUserAsync(string masterPassword, string user, string errors, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        masterPassword,
                        user,
                        errors}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        public bool DisableSessionManager(string masterPassword, string site, string SessionManagerURI, bool disable, ref string errors) {
            return base.Channel.DisableSessionManager(masterPassword, site, SessionManagerURI, disable, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDisableSessionManager(string masterPassword, string site, string SessionManagerURI, bool disable, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisableSessionManager(masterPassword, site, SessionManagerURI, disable, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDisableSessionManager(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndDisableSessionManager(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginDisableSessionManager(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string SessionManagerURI = ((string)(inValues[2]));
            bool disable = ((bool)(inValues[3]));
            string errors = ((string)(inValues[4]));
            return this.BeginDisableSessionManager(masterPassword, site, SessionManagerURI, disable, ref errors, callback, asyncState);
        }
        
        private object[] OnEndDisableSessionManager(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDisableSessionManager(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnDisableSessionManagerCompleted(object state) {
            if ((this.DisableSessionManagerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisableSessionManagerCompleted(this, new DisableSessionManagerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisableSessionManagerAsync(string masterPassword, string site, string SessionManagerURI, bool disable, string errors) {
            this.DisableSessionManagerAsync(masterPassword, site, SessionManagerURI, disable, errors, null);
        }
        
        public void DisableSessionManagerAsync(string masterPassword, string site, string SessionManagerURI, bool disable, string errors, object userState) {
            if ((this.onBeginDisableSessionManagerDelegate == null)) {
                this.onBeginDisableSessionManagerDelegate = new BeginOperationDelegate(this.OnBeginDisableSessionManager);
            }
            if ((this.onEndDisableSessionManagerDelegate == null)) {
                this.onEndDisableSessionManagerDelegate = new EndOperationDelegate(this.OnEndDisableSessionManager);
            }
            if ((this.onDisableSessionManagerCompletedDelegate == null)) {
                this.onDisableSessionManagerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisableSessionManagerCompleted);
            }
            base.InvokeAsync(this.onBeginDisableSessionManagerDelegate, new object[] {
                        masterPassword,
                        site,
                        SessionManagerURI,
                        disable,
                        errors}, this.onEndDisableSessionManagerDelegate, this.onDisableSessionManagerCompletedDelegate, userState);
        }
        
        public string ListSessionManagersForSite(string masterPassword, string site, ref string messages) {
            return base.Channel.ListSessionManagersForSite(masterPassword, site, ref messages);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginListSessionManagersForSite(string masterPassword, string site, ref string messages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListSessionManagersForSite(masterPassword, site, ref messages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndListSessionManagersForSite(ref string messages, System.IAsyncResult result) {
            return base.Channel.EndListSessionManagersForSite(ref messages, result);
        }
        
        private System.IAsyncResult OnBeginListSessionManagersForSite(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string messages = ((string)(inValues[2]));
            return this.BeginListSessionManagersForSite(masterPassword, site, ref messages, callback, asyncState);
        }
        
        private object[] OnEndListSessionManagersForSite(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndListSessionManagersForSite(ref messages, result);
            return new object[] {
                    messages,
                    retVal};
        }
        
        private void OnListSessionManagersForSiteCompleted(object state) {
            if ((this.ListSessionManagersForSiteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListSessionManagersForSiteCompleted(this, new ListSessionManagersForSiteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListSessionManagersForSiteAsync(string masterPassword, string site, string messages) {
            this.ListSessionManagersForSiteAsync(masterPassword, site, messages, null);
        }
        
        public void ListSessionManagersForSiteAsync(string masterPassword, string site, string messages, object userState) {
            if ((this.onBeginListSessionManagersForSiteDelegate == null)) {
                this.onBeginListSessionManagersForSiteDelegate = new BeginOperationDelegate(this.OnBeginListSessionManagersForSite);
            }
            if ((this.onEndListSessionManagersForSiteDelegate == null)) {
                this.onEndListSessionManagersForSiteDelegate = new EndOperationDelegate(this.OnEndListSessionManagersForSite);
            }
            if ((this.onListSessionManagersForSiteCompletedDelegate == null)) {
                this.onListSessionManagersForSiteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListSessionManagersForSiteCompleted);
            }
            base.InvokeAsync(this.onBeginListSessionManagersForSiteDelegate, new object[] {
                        masterPassword,
                        site,
                        messages}, this.onEndListSessionManagersForSiteDelegate, this.onListSessionManagersForSiteCompletedDelegate, userState);
        }
        
        public string ListSessionsForServer(string serverURI, string password, ref string messages) {
            return base.Channel.ListSessionsForServer(serverURI, password, ref messages);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginListSessionsForServer(string serverURI, string password, ref string messages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListSessionsForServer(serverURI, password, ref messages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndListSessionsForServer(ref string messages, System.IAsyncResult result) {
            return base.Channel.EndListSessionsForServer(ref messages, result);
        }
        
        private System.IAsyncResult OnBeginListSessionsForServer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverURI = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string messages = ((string)(inValues[2]));
            return this.BeginListSessionsForServer(serverURI, password, ref messages, callback, asyncState);
        }
        
        private object[] OnEndListSessionsForServer(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndListSessionsForServer(ref messages, result);
            return new object[] {
                    messages,
                    retVal};
        }
        
        private void OnListSessionsForServerCompleted(object state) {
            if ((this.ListSessionsForServerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListSessionsForServerCompleted(this, new ListSessionsForServerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListSessionsForServerAsync(string serverURI, string password, string messages) {
            this.ListSessionsForServerAsync(serverURI, password, messages, null);
        }
        
        public void ListSessionsForServerAsync(string serverURI, string password, string messages, object userState) {
            if ((this.onBeginListSessionsForServerDelegate == null)) {
                this.onBeginListSessionsForServerDelegate = new BeginOperationDelegate(this.OnBeginListSessionsForServer);
            }
            if ((this.onEndListSessionsForServerDelegate == null)) {
                this.onEndListSessionsForServerDelegate = new EndOperationDelegate(this.OnEndListSessionsForServer);
            }
            if ((this.onListSessionsForServerCompletedDelegate == null)) {
                this.onListSessionsForServerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListSessionsForServerCompleted);
            }
            base.InvokeAsync(this.onBeginListSessionsForServerDelegate, new object[] {
                        serverURI,
                        password,
                        messages}, this.onEndListSessionsForServerDelegate, this.onListSessionsForServerCompletedDelegate, userState);
        }
        
        public string ListUsers(string masterPassword, ref string errors) {
            return base.Channel.ListUsers(masterPassword, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginListUsers(string masterPassword, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListUsers(masterPassword, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndListUsers(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndListUsers(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginListUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string errors = ((string)(inValues[1]));
            return this.BeginListUsers(masterPassword, ref errors, callback, asyncState);
        }
        
        private object[] OnEndListUsers(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndListUsers(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnListUsersCompleted(object state) {
            if ((this.ListUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListUsersCompleted(this, new ListUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListUsersAsync(string masterPassword, string errors) {
            this.ListUsersAsync(masterPassword, errors, null);
        }
        
        public void ListUsersAsync(string masterPassword, string errors, object userState) {
            if ((this.onBeginListUsersDelegate == null)) {
                this.onBeginListUsersDelegate = new BeginOperationDelegate(this.OnBeginListUsers);
            }
            if ((this.onEndListUsersDelegate == null)) {
                this.onEndListUsersDelegate = new EndOperationDelegate(this.OnEndListUsers);
            }
            if ((this.onListUsersCompletedDelegate == null)) {
                this.onListUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListUsersCompleted);
            }
            base.InvokeAsync(this.onBeginListUsersDelegate, new object[] {
                        masterPassword,
                        errors}, this.onEndListUsersDelegate, this.onListUsersCompletedDelegate, userState);
        }
        
        public bool ResetUserPassword(string masterPassword, string user, string password, ref string errors) {
            return base.Channel.ResetUserPassword(masterPassword, user, password, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetUserPassword(string masterPassword, string user, string password, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetUserPassword(masterPassword, user, password, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndResetUserPassword(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndResetUserPassword(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginResetUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string user = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            string errors = ((string)(inValues[3]));
            return this.BeginResetUserPassword(masterPassword, user, password, ref errors, callback, asyncState);
        }
        
        private object[] OnEndResetUserPassword(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndResetUserPassword(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnResetUserPasswordCompleted(object state) {
            if ((this.ResetUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetUserPasswordCompleted(this, new ResetUserPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetUserPasswordAsync(string masterPassword, string user, string password, string errors) {
            this.ResetUserPasswordAsync(masterPassword, user, password, errors, null);
        }
        
        public void ResetUserPasswordAsync(string masterPassword, string user, string password, string errors, object userState) {
            if ((this.onBeginResetUserPasswordDelegate == null)) {
                this.onBeginResetUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginResetUserPassword);
            }
            if ((this.onEndResetUserPasswordDelegate == null)) {
                this.onEndResetUserPasswordDelegate = new EndOperationDelegate(this.OnEndResetUserPassword);
            }
            if ((this.onResetUserPasswordCompletedDelegate == null)) {
                this.onResetUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginResetUserPasswordDelegate, new object[] {
                        masterPassword,
                        user,
                        password,
                        errors}, this.onEndResetUserPasswordDelegate, this.onResetUserPasswordCompletedDelegate, userState);
        }
        
        public bool SetSessionManagerLoggingProfile(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, ref string errors) {
            return base.Channel.SetSessionManagerLoggingProfile(masterPassword, site, SessionManagerURI, logDebug, logInfo, logWarning, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetSessionManagerLoggingProfile(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetSessionManagerLoggingProfile(masterPassword, site, SessionManagerURI, logDebug, logInfo, logWarning, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSetSessionManagerLoggingProfile(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndSetSessionManagerLoggingProfile(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginSetSessionManagerLoggingProfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string SessionManagerURI = ((string)(inValues[2]));
            bool logDebug = ((bool)(inValues[3]));
            bool logInfo = ((bool)(inValues[4]));
            bool logWarning = ((bool)(inValues[5]));
            string errors = ((string)(inValues[6]));
            return this.BeginSetSessionManagerLoggingProfile(masterPassword, site, SessionManagerURI, logDebug, logInfo, logWarning, ref errors, callback, asyncState);
        }
        
        private object[] OnEndSetSessionManagerLoggingProfile(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndSetSessionManagerLoggingProfile(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnSetSessionManagerLoggingProfileCompleted(object state) {
            if ((this.SetSessionManagerLoggingProfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetSessionManagerLoggingProfileCompleted(this, new SetSessionManagerLoggingProfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetSessionManagerLoggingProfileAsync(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, string errors) {
            this.SetSessionManagerLoggingProfileAsync(masterPassword, site, SessionManagerURI, logDebug, logInfo, logWarning, errors, null);
        }
        
        public void SetSessionManagerLoggingProfileAsync(string masterPassword, string site, string SessionManagerURI, bool logDebug, bool logInfo, bool logWarning, string errors, object userState) {
            if ((this.onBeginSetSessionManagerLoggingProfileDelegate == null)) {
                this.onBeginSetSessionManagerLoggingProfileDelegate = new BeginOperationDelegate(this.OnBeginSetSessionManagerLoggingProfile);
            }
            if ((this.onEndSetSessionManagerLoggingProfileDelegate == null)) {
                this.onEndSetSessionManagerLoggingProfileDelegate = new EndOperationDelegate(this.OnEndSetSessionManagerLoggingProfile);
            }
            if ((this.onSetSessionManagerLoggingProfileCompletedDelegate == null)) {
                this.onSetSessionManagerLoggingProfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetSessionManagerLoggingProfileCompleted);
            }
            base.InvokeAsync(this.onBeginSetSessionManagerLoggingProfileDelegate, new object[] {
                        masterPassword,
                        site,
                        SessionManagerURI,
                        logDebug,
                        logInfo,
                        logWarning,
                        errors}, this.onEndSetSessionManagerLoggingProfileDelegate, this.onSetSessionManagerLoggingProfileCompletedDelegate, userState);
        }
        
        public bool ExportAllBlobsBegin(string masterPassword, string site, string accountName, string accountKey, ref string handle, ref string errors, ref int totalBlobs) {
            return base.Channel.ExportAllBlobsBegin(masterPassword, site, accountName, accountKey, ref handle, ref errors, ref totalBlobs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExportAllBlobsBegin(string masterPassword, string site, string accountName, string accountKey, ref string handle, ref string errors, ref int totalBlobs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExportAllBlobsBegin(masterPassword, site, accountName, accountKey, ref handle, ref errors, ref totalBlobs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExportAllBlobsBegin(ref string handle, ref string errors, ref int totalBlobs, System.IAsyncResult result) {
            return base.Channel.EndExportAllBlobsBegin(ref handle, ref errors, ref totalBlobs, result);
        }
        
        private System.IAsyncResult OnBeginExportAllBlobsBegin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string accountName = ((string)(inValues[2]));
            string accountKey = ((string)(inValues[3]));
            string handle = ((string)(inValues[4]));
            string errors = ((string)(inValues[5]));
            int totalBlobs = ((int)(inValues[6]));
            return this.BeginExportAllBlobsBegin(masterPassword, site, accountName, accountKey, ref handle, ref errors, ref totalBlobs, callback, asyncState);
        }
        
        private object[] OnEndExportAllBlobsBegin(System.IAsyncResult result) {
            string handle = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            int totalBlobs = this.GetDefaultValueForInitialization<int>();
            bool retVal = this.EndExportAllBlobsBegin(ref handle, ref errors, ref totalBlobs, result);
            return new object[] {
                    handle,
                    errors,
                    totalBlobs,
                    retVal};
        }
        
        private void OnExportAllBlobsBeginCompleted(object state) {
            if ((this.ExportAllBlobsBeginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportAllBlobsBeginCompleted(this, new ExportAllBlobsBeginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportAllBlobsBeginAsync(string masterPassword, string site, string accountName, string accountKey, string handle, string errors, int totalBlobs) {
            this.ExportAllBlobsBeginAsync(masterPassword, site, accountName, accountKey, handle, errors, totalBlobs, null);
        }
        
        public void ExportAllBlobsBeginAsync(string masterPassword, string site, string accountName, string accountKey, string handle, string errors, int totalBlobs, object userState) {
            if ((this.onBeginExportAllBlobsBeginDelegate == null)) {
                this.onBeginExportAllBlobsBeginDelegate = new BeginOperationDelegate(this.OnBeginExportAllBlobsBegin);
            }
            if ((this.onEndExportAllBlobsBeginDelegate == null)) {
                this.onEndExportAllBlobsBeginDelegate = new EndOperationDelegate(this.OnEndExportAllBlobsBegin);
            }
            if ((this.onExportAllBlobsBeginCompletedDelegate == null)) {
                this.onExportAllBlobsBeginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportAllBlobsBeginCompleted);
            }
            base.InvokeAsync(this.onBeginExportAllBlobsBeginDelegate, new object[] {
                        masterPassword,
                        site,
                        accountName,
                        accountKey,
                        handle,
                        errors,
                        totalBlobs}, this.onEndExportAllBlobsBeginDelegate, this.onExportAllBlobsBeginCompletedDelegate, userState);
        }
        
        public bool ExportAllBlobsChunk(string sessionHandle, ref string messages, ref string errors) {
            return base.Channel.ExportAllBlobsChunk(sessionHandle, ref messages, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExportAllBlobsChunk(string sessionHandle, ref string messages, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExportAllBlobsChunk(sessionHandle, ref messages, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExportAllBlobsChunk(ref string messages, ref string errors, System.IAsyncResult result) {
            return base.Channel.EndExportAllBlobsChunk(ref messages, ref errors, result);
        }
        
        private System.IAsyncResult OnBeginExportAllBlobsChunk(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionHandle = ((string)(inValues[0]));
            string messages = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return this.BeginExportAllBlobsChunk(sessionHandle, ref messages, ref errors, callback, asyncState);
        }
        
        private object[] OnEndExportAllBlobsChunk(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndExportAllBlobsChunk(ref messages, ref errors, result);
            return new object[] {
                    messages,
                    errors,
                    retVal};
        }
        
        private void OnExportAllBlobsChunkCompleted(object state) {
            if ((this.ExportAllBlobsChunkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportAllBlobsChunkCompleted(this, new ExportAllBlobsChunkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportAllBlobsChunkAsync(string sessionHandle, string messages, string errors) {
            this.ExportAllBlobsChunkAsync(sessionHandle, messages, errors, null);
        }
        
        public void ExportAllBlobsChunkAsync(string sessionHandle, string messages, string errors, object userState) {
            if ((this.onBeginExportAllBlobsChunkDelegate == null)) {
                this.onBeginExportAllBlobsChunkDelegate = new BeginOperationDelegate(this.OnBeginExportAllBlobsChunk);
            }
            if ((this.onEndExportAllBlobsChunkDelegate == null)) {
                this.onEndExportAllBlobsChunkDelegate = new EndOperationDelegate(this.OnEndExportAllBlobsChunk);
            }
            if ((this.onExportAllBlobsChunkCompletedDelegate == null)) {
                this.onExportAllBlobsChunkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportAllBlobsChunkCompleted);
            }
            base.InvokeAsync(this.onBeginExportAllBlobsChunkDelegate, new object[] {
                        sessionHandle,
                        messages,
                        errors}, this.onEndExportAllBlobsChunkDelegate, this.onExportAllBlobsChunkCompletedDelegate, userState);
        }
        
        public void ExportAllBlobsCleanup(string sessionHandle, bool ok) {
            base.Channel.ExportAllBlobsCleanup(sessionHandle, ok);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExportAllBlobsCleanup(string sessionHandle, bool ok, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExportAllBlobsCleanup(sessionHandle, ok, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndExportAllBlobsCleanup(System.IAsyncResult result) {
            base.Channel.EndExportAllBlobsCleanup(result);
        }
        
        private System.IAsyncResult OnBeginExportAllBlobsCleanup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionHandle = ((string)(inValues[0]));
            bool ok = ((bool)(inValues[1]));
            return this.BeginExportAllBlobsCleanup(sessionHandle, ok, callback, asyncState);
        }
        
        private object[] OnEndExportAllBlobsCleanup(System.IAsyncResult result) {
            this.EndExportAllBlobsCleanup(result);
            return null;
        }
        
        private void OnExportAllBlobsCleanupCompleted(object state) {
            if ((this.ExportAllBlobsCleanupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportAllBlobsCleanupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportAllBlobsCleanupAsync(string sessionHandle, bool ok) {
            this.ExportAllBlobsCleanupAsync(sessionHandle, ok, null);
        }
        
        public void ExportAllBlobsCleanupAsync(string sessionHandle, bool ok, object userState) {
            if ((this.onBeginExportAllBlobsCleanupDelegate == null)) {
                this.onBeginExportAllBlobsCleanupDelegate = new BeginOperationDelegate(this.OnBeginExportAllBlobsCleanup);
            }
            if ((this.onEndExportAllBlobsCleanupDelegate == null)) {
                this.onEndExportAllBlobsCleanupDelegate = new EndOperationDelegate(this.OnEndExportAllBlobsCleanup);
            }
            if ((this.onExportAllBlobsCleanupCompletedDelegate == null)) {
                this.onExportAllBlobsCleanupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportAllBlobsCleanupCompleted);
            }
            base.InvokeAsync(this.onBeginExportAllBlobsCleanupDelegate, new object[] {
                        sessionHandle,
                        ok}, this.onEndExportAllBlobsCleanupDelegate, this.onExportAllBlobsCleanupCompletedDelegate, userState);
        }
        
        public bool SyncronisePersistentSchema(string masterPassword, string site, ref string messages, ref string errors, ref string DBML, bool apply, ref string script) {
            return base.Channel.SyncronisePersistentSchema(masterPassword, site, ref messages, ref errors, ref DBML, apply, ref script);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSyncronisePersistentSchema(string masterPassword, string site, ref string messages, ref string errors, ref string DBML, bool apply, ref string script, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSyncronisePersistentSchema(masterPassword, site, ref messages, ref errors, ref DBML, apply, ref script, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSyncronisePersistentSchema(ref string messages, ref string errors, ref string DBML, ref string script, System.IAsyncResult result) {
            return base.Channel.EndSyncronisePersistentSchema(ref messages, ref errors, ref DBML, ref script, result);
        }
        
        private System.IAsyncResult OnBeginSyncronisePersistentSchema(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string messages = ((string)(inValues[2]));
            string errors = ((string)(inValues[3]));
            string DBML = ((string)(inValues[4]));
            bool apply = ((bool)(inValues[5]));
            string script = ((string)(inValues[6]));
            return this.BeginSyncronisePersistentSchema(masterPassword, site, ref messages, ref errors, ref DBML, apply, ref script, callback, asyncState);
        }
        
        private object[] OnEndSyncronisePersistentSchema(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            string errors = this.GetDefaultValueForInitialization<string>();
            string DBML = this.GetDefaultValueForInitialization<string>();
            string script = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndSyncronisePersistentSchema(ref messages, ref errors, ref DBML, ref script, result);
            return new object[] {
                    messages,
                    errors,
                    DBML,
                    script,
                    retVal};
        }
        
        private void OnSyncronisePersistentSchemaCompleted(object state) {
            if ((this.SyncronisePersistentSchemaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SyncronisePersistentSchemaCompleted(this, new SyncronisePersistentSchemaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SyncronisePersistentSchemaAsync(string masterPassword, string site, string messages, string errors, string DBML, bool apply, string script) {
            this.SyncronisePersistentSchemaAsync(masterPassword, site, messages, errors, DBML, apply, script, null);
        }
        
        public void SyncronisePersistentSchemaAsync(string masterPassword, string site, string messages, string errors, string DBML, bool apply, string script, object userState) {
            if ((this.onBeginSyncronisePersistentSchemaDelegate == null)) {
                this.onBeginSyncronisePersistentSchemaDelegate = new BeginOperationDelegate(this.OnBeginSyncronisePersistentSchema);
            }
            if ((this.onEndSyncronisePersistentSchemaDelegate == null)) {
                this.onEndSyncronisePersistentSchemaDelegate = new EndOperationDelegate(this.OnEndSyncronisePersistentSchema);
            }
            if ((this.onSyncronisePersistentSchemaCompletedDelegate == null)) {
                this.onSyncronisePersistentSchemaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSyncronisePersistentSchemaCompleted);
            }
            base.InvokeAsync(this.onBeginSyncronisePersistentSchemaDelegate, new object[] {
                        masterPassword,
                        site,
                        messages,
                        errors,
                        DBML,
                        apply,
                        script}, this.onEndSyncronisePersistentSchemaDelegate, this.onSyncronisePersistentSchemaCompletedDelegate, userState);
        }
        
        public bool TerminateSession(string site, string serverURI, string sessionHandle, string password, ref string messages) {
            return base.Channel.TerminateSession(site, serverURI, sessionHandle, password, ref messages);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTerminateSession(string site, string serverURI, string sessionHandle, string password, ref string messages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTerminateSession(site, serverURI, sessionHandle, password, ref messages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndTerminateSession(ref string messages, System.IAsyncResult result) {
            return base.Channel.EndTerminateSession(ref messages, result);
        }
        
        private System.IAsyncResult OnBeginTerminateSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string site = ((string)(inValues[0]));
            string serverURI = ((string)(inValues[1]));
            string sessionHandle = ((string)(inValues[2]));
            string password = ((string)(inValues[3]));
            string messages = ((string)(inValues[4]));
            return this.BeginTerminateSession(site, serverURI, sessionHandle, password, ref messages, callback, asyncState);
        }
        
        private object[] OnEndTerminateSession(System.IAsyncResult result) {
            string messages = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndTerminateSession(ref messages, result);
            return new object[] {
                    messages,
                    retVal};
        }
        
        private void OnTerminateSessionCompleted(object state) {
            if ((this.TerminateSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TerminateSessionCompleted(this, new TerminateSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TerminateSessionAsync(string site, string serverURI, string sessionHandle, string password, string messages) {
            this.TerminateSessionAsync(site, serverURI, sessionHandle, password, messages, null);
        }
        
        public void TerminateSessionAsync(string site, string serverURI, string sessionHandle, string password, string messages, object userState) {
            if ((this.onBeginTerminateSessionDelegate == null)) {
                this.onBeginTerminateSessionDelegate = new BeginOperationDelegate(this.OnBeginTerminateSession);
            }
            if ((this.onEndTerminateSessionDelegate == null)) {
                this.onEndTerminateSessionDelegate = new EndOperationDelegate(this.OnEndTerminateSession);
            }
            if ((this.onTerminateSessionCompletedDelegate == null)) {
                this.onTerminateSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTerminateSessionCompleted);
            }
            base.InvokeAsync(this.onBeginTerminateSessionDelegate, new object[] {
                        site,
                        serverURI,
                        sessionHandle,
                        password,
                        messages}, this.onEndTerminateSessionDelegate, this.onTerminateSessionCompletedDelegate, userState);
        }
        
        public bool SetTraceLogging(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, ref string errors) {
            return base.Channel.SetTraceLogging(masterPassword, traceName, site, traceType, traceLogEnabled, serverURI, sessionHandle, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetTraceLogging(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetTraceLogging(masterPassword, traceName, site, traceType, traceLogEnabled, serverURI, sessionHandle, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSetTraceLogging(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndSetTraceLogging(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginSetTraceLogging(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string traceName = ((string)(inValues[1]));
            string site = ((string)(inValues[2]));
            string traceType = ((string)(inValues[3]));
            bool traceLogEnabled = ((bool)(inValues[4]));
            string serverURI = ((string)(inValues[5]));
            string sessionHandle = ((string)(inValues[6]));
            string errors = ((string)(inValues[7]));
            return this.BeginSetTraceLogging(masterPassword, traceName, site, traceType, traceLogEnabled, serverURI, sessionHandle, ref errors, callback, asyncState);
        }
        
        private object[] OnEndSetTraceLogging(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndSetTraceLogging(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnSetTraceLoggingCompleted(object state) {
            if ((this.SetTraceLoggingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetTraceLoggingCompleted(this, new SetTraceLoggingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetTraceLoggingAsync(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, string errors) {
            this.SetTraceLoggingAsync(masterPassword, traceName, site, traceType, traceLogEnabled, serverURI, sessionHandle, errors, null);
        }
        
        public void SetTraceLoggingAsync(string masterPassword, string traceName, string site, string traceType, bool traceLogEnabled, string serverURI, string sessionHandle, string errors, object userState) {
            if ((this.onBeginSetTraceLoggingDelegate == null)) {
                this.onBeginSetTraceLoggingDelegate = new BeginOperationDelegate(this.OnBeginSetTraceLogging);
            }
            if ((this.onEndSetTraceLoggingDelegate == null)) {
                this.onEndSetTraceLoggingDelegate = new EndOperationDelegate(this.OnEndSetTraceLogging);
            }
            if ((this.onSetTraceLoggingCompletedDelegate == null)) {
                this.onSetTraceLoggingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetTraceLoggingCompleted);
            }
            base.InvokeAsync(this.onBeginSetTraceLoggingDelegate, new object[] {
                        masterPassword,
                        traceName,
                        site,
                        traceType,
                        traceLogEnabled,
                        serverURI,
                        sessionHandle,
                        errors}, this.onEndSetTraceLoggingDelegate, this.onSetTraceLoggingCompletedDelegate, userState);
        }
        
        public bool StopTraceLogging(string masterPassword, string guid, ref string errors) {
            return base.Channel.StopTraceLogging(masterPassword, guid, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStopTraceLogging(string masterPassword, string guid, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStopTraceLogging(masterPassword, guid, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndStopTraceLogging(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndStopTraceLogging(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginStopTraceLogging(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string guid = ((string)(inValues[1]));
            string errors = ((string)(inValues[2]));
            return this.BeginStopTraceLogging(masterPassword, guid, ref errors, callback, asyncState);
        }
        
        private object[] OnEndStopTraceLogging(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndStopTraceLogging(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnStopTraceLoggingCompleted(object state) {
            if ((this.StopTraceLoggingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StopTraceLoggingCompleted(this, new StopTraceLoggingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StopTraceLoggingAsync(string masterPassword, string guid, string errors) {
            this.StopTraceLoggingAsync(masterPassword, guid, errors, null);
        }
        
        public void StopTraceLoggingAsync(string masterPassword, string guid, string errors, object userState) {
            if ((this.onBeginStopTraceLoggingDelegate == null)) {
                this.onBeginStopTraceLoggingDelegate = new BeginOperationDelegate(this.OnBeginStopTraceLogging);
            }
            if ((this.onEndStopTraceLoggingDelegate == null)) {
                this.onEndStopTraceLoggingDelegate = new EndOperationDelegate(this.OnEndStopTraceLogging);
            }
            if ((this.onStopTraceLoggingCompletedDelegate == null)) {
                this.onStopTraceLoggingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStopTraceLoggingCompleted);
            }
            base.InvokeAsync(this.onBeginStopTraceLoggingDelegate, new object[] {
                        masterPassword,
                        guid,
                        errors}, this.onEndStopTraceLoggingDelegate, this.onStopTraceLoggingCompletedDelegate, userState);
        }
        
        public string GetTraceLogs(string masterPassword, string site, bool activeOnly, ref string errors) {
            return base.Channel.GetTraceLogs(masterPassword, site, activeOnly, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTraceLogs(string masterPassword, string site, bool activeOnly, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTraceLogs(masterPassword, site, activeOnly, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetTraceLogs(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndGetTraceLogs(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginGetTraceLogs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            bool activeOnly = ((bool)(inValues[2]));
            string errors = ((string)(inValues[3]));
            return this.BeginGetTraceLogs(masterPassword, site, activeOnly, ref errors, callback, asyncState);
        }
        
        private object[] OnEndGetTraceLogs(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndGetTraceLogs(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnGetTraceLogsCompleted(object state) {
            if ((this.GetTraceLogsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTraceLogsCompleted(this, new GetTraceLogsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTraceLogsAsync(string masterPassword, string site, bool activeOnly, string errors) {
            this.GetTraceLogsAsync(masterPassword, site, activeOnly, errors, null);
        }
        
        public void GetTraceLogsAsync(string masterPassword, string site, bool activeOnly, string errors, object userState) {
            if ((this.onBeginGetTraceLogsDelegate == null)) {
                this.onBeginGetTraceLogsDelegate = new BeginOperationDelegate(this.OnBeginGetTraceLogs);
            }
            if ((this.onEndGetTraceLogsDelegate == null)) {
                this.onEndGetTraceLogsDelegate = new EndOperationDelegate(this.OnEndGetTraceLogs);
            }
            if ((this.onGetTraceLogsCompletedDelegate == null)) {
                this.onGetTraceLogsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTraceLogsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTraceLogsDelegate, new object[] {
                        masterPassword,
                        site,
                        activeOnly,
                        errors}, this.onEndGetTraceLogsDelegate, this.onGetTraceLogsCompletedDelegate, userState);
        }
        
        public string GetTraceDetail(string masterPassword, string guid, bool requestOnly, ref string errors, string sessionId, ref bool hasMoreRows) {
            return base.Channel.GetTraceDetail(masterPassword, guid, requestOnly, ref errors, sessionId, ref hasMoreRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTraceDetail(string masterPassword, string guid, bool requestOnly, ref string errors, string sessionId, ref bool hasMoreRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTraceDetail(masterPassword, guid, requestOnly, ref errors, sessionId, ref hasMoreRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetTraceDetail(ref string errors, ref bool hasMoreRows, System.IAsyncResult result) {
            return base.Channel.EndGetTraceDetail(ref errors, ref hasMoreRows, result);
        }
        
        private System.IAsyncResult OnBeginGetTraceDetail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string guid = ((string)(inValues[1]));
            bool requestOnly = ((bool)(inValues[2]));
            string errors = ((string)(inValues[3]));
            string sessionId = ((string)(inValues[4]));
            bool hasMoreRows = ((bool)(inValues[5]));
            return this.BeginGetTraceDetail(masterPassword, guid, requestOnly, ref errors, sessionId, ref hasMoreRows, callback, asyncState);
        }
        
        private object[] OnEndGetTraceDetail(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool hasMoreRows = this.GetDefaultValueForInitialization<bool>();
            string retVal = this.EndGetTraceDetail(ref errors, ref hasMoreRows, result);
            return new object[] {
                    errors,
                    hasMoreRows,
                    retVal};
        }
        
        private void OnGetTraceDetailCompleted(object state) {
            if ((this.GetTraceDetailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTraceDetailCompleted(this, new GetTraceDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTraceDetailAsync(string masterPassword, string guid, bool requestOnly, string errors, string sessionId, bool hasMoreRows) {
            this.GetTraceDetailAsync(masterPassword, guid, requestOnly, errors, sessionId, hasMoreRows, null);
        }
        
        public void GetTraceDetailAsync(string masterPassword, string guid, bool requestOnly, string errors, string sessionId, bool hasMoreRows, object userState) {
            if ((this.onBeginGetTraceDetailDelegate == null)) {
                this.onBeginGetTraceDetailDelegate = new BeginOperationDelegate(this.OnBeginGetTraceDetail);
            }
            if ((this.onEndGetTraceDetailDelegate == null)) {
                this.onEndGetTraceDetailDelegate = new EndOperationDelegate(this.OnEndGetTraceDetail);
            }
            if ((this.onGetTraceDetailCompletedDelegate == null)) {
                this.onGetTraceDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTraceDetailCompleted);
            }
            base.InvokeAsync(this.onBeginGetTraceDetailDelegate, new object[] {
                        masterPassword,
                        guid,
                        requestOnly,
                        errors,
                        sessionId,
                        hasMoreRows}, this.onEndGetTraceDetailDelegate, this.onGetTraceDetailCompletedDelegate, userState);
        }
        
        public bool EnableDiagnostics(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, ref string errors) {
            return base.Channel.EnableDiagnostics(masterPassword, enabled, enableForSiteManager, site, appServerUri, deleteExistingData, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEnableDiagnostics(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnableDiagnostics(masterPassword, enabled, enableForSiteManager, site, appServerUri, deleteExistingData, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndEnableDiagnostics(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndEnableDiagnostics(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginEnableDiagnostics(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            bool enabled = ((bool)(inValues[1]));
            bool enableForSiteManager = ((bool)(inValues[2]));
            string site = ((string)(inValues[3]));
            string appServerUri = ((string)(inValues[4]));
            bool deleteExistingData = ((bool)(inValues[5]));
            string errors = ((string)(inValues[6]));
            return this.BeginEnableDiagnostics(masterPassword, enabled, enableForSiteManager, site, appServerUri, deleteExistingData, ref errors, callback, asyncState);
        }
        
        private object[] OnEndEnableDiagnostics(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndEnableDiagnostics(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnEnableDiagnosticsCompleted(object state) {
            if ((this.EnableDiagnosticsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnableDiagnosticsCompleted(this, new EnableDiagnosticsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnableDiagnosticsAsync(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, string errors) {
            this.EnableDiagnosticsAsync(masterPassword, enabled, enableForSiteManager, site, appServerUri, deleteExistingData, errors, null);
        }
        
        public void EnableDiagnosticsAsync(string masterPassword, bool enabled, bool enableForSiteManager, string site, string appServerUri, bool deleteExistingData, string errors, object userState) {
            if ((this.onBeginEnableDiagnosticsDelegate == null)) {
                this.onBeginEnableDiagnosticsDelegate = new BeginOperationDelegate(this.OnBeginEnableDiagnostics);
            }
            if ((this.onEndEnableDiagnosticsDelegate == null)) {
                this.onEndEnableDiagnosticsDelegate = new EndOperationDelegate(this.OnEndEnableDiagnostics);
            }
            if ((this.onEnableDiagnosticsCompletedDelegate == null)) {
                this.onEnableDiagnosticsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnableDiagnosticsCompleted);
            }
            base.InvokeAsync(this.onBeginEnableDiagnosticsDelegate, new object[] {
                        masterPassword,
                        enabled,
                        enableForSiteManager,
                        site,
                        appServerUri,
                        deleteExistingData,
                        errors}, this.onEndEnableDiagnosticsDelegate, this.onEnableDiagnosticsCompletedDelegate, userState);
        }
        
        public string GetLogsDetails(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, ref string errors) {
            return base.Channel.GetLogsDetails(masterPassword, site, serviceName, from, to, prefix, ref errors);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLogsDetails(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, ref string errors, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLogsDetails(masterPassword, site, serviceName, from, to, prefix, ref errors, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetLogsDetails(ref string errors, System.IAsyncResult result) {
            return base.Channel.EndGetLogsDetails(ref errors, result);
        }
        
        private System.IAsyncResult OnBeginGetLogsDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string masterPassword = ((string)(inValues[0]));
            string site = ((string)(inValues[1]));
            string serviceName = ((string)(inValues[2]));
            System.Nullable<System.DateTime> from = ((System.Nullable<System.DateTime>)(inValues[3]));
            System.Nullable<System.DateTime> to = ((System.Nullable<System.DateTime>)(inValues[4]));
            string prefix = ((string)(inValues[5]));
            string errors = ((string)(inValues[6]));
            return this.BeginGetLogsDetails(masterPassword, site, serviceName, from, to, prefix, ref errors, callback, asyncState);
        }
        
        private object[] OnEndGetLogsDetails(System.IAsyncResult result) {
            string errors = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndGetLogsDetails(ref errors, result);
            return new object[] {
                    errors,
                    retVal};
        }
        
        private void OnGetLogsDetailsCompleted(object state) {
            if ((this.GetLogsDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLogsDetailsCompleted(this, new GetLogsDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLogsDetailsAsync(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, string errors) {
            this.GetLogsDetailsAsync(masterPassword, site, serviceName, from, to, prefix, errors, null);
        }
        
        public void GetLogsDetailsAsync(string masterPassword, string site, string serviceName, System.Nullable<System.DateTime> from, System.Nullable<System.DateTime> to, string prefix, string errors, object userState) {
            if ((this.onBeginGetLogsDetailsDelegate == null)) {
                this.onBeginGetLogsDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetLogsDetails);
            }
            if ((this.onEndGetLogsDetailsDelegate == null)) {
                this.onEndGetLogsDetailsDelegate = new EndOperationDelegate(this.OnEndGetLogsDetails);
            }
            if ((this.onGetLogsDetailsCompletedDelegate == null)) {
                this.onGetLogsDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLogsDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetLogsDetailsDelegate, new object[] {
                        masterPassword,
                        site,
                        serviceName,
                        from,
                        to,
                        prefix,
                        errors}, this.onEndGetLogsDetailsDelegate, this.onGetLogsDetailsCompletedDelegate, userState);
        }
    }
}
